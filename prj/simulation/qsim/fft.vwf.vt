// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2024 18:50:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fft
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fft_vlg_sample_tst(
	CLK,
	EN,
	I0_imag,
	I0_real,
	I1_imag,
	I1_real,
	I2_imag,
	I2_real,
	I3_imag,
	I3_real,
	I4_imag,
	I4_real,
	I5_imag,
	I5_real,
	I6_imag,
	I6_real,
	I7_imag,
	I7_real,
	INV,
	RESET,
	sampler_tx
);
input  CLK;
input  EN;
input [15:0] I0_imag;
input [15:0] I0_real;
input [15:0] I1_imag;
input [15:0] I1_real;
input [15:0] I2_imag;
input [15:0] I2_real;
input [15:0] I3_imag;
input [15:0] I3_real;
input [15:0] I4_imag;
input [15:0] I4_real;
input [15:0] I5_imag;
input [15:0] I5_real;
input [15:0] I6_imag;
input [15:0] I6_real;
input [15:0] I7_imag;
input [15:0] I7_real;
input  INV;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or I0_imag or I0_real or I1_imag or I1_real or I2_imag or I2_real or I3_imag or I3_real or I4_imag or I4_real or I5_imag or I5_real or I6_imag or I6_real or I7_imag or I7_real or INV or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fft_vlg_check_tst (
	O0_imag,
	O0_real,
	O1_imag,
	O1_real,
	O2_imag,
	O2_real,
	O3_imag,
	O3_real,
	O4_imag,
	O4_real,
	O5_imag,
	O5_real,
	O6_imag,
	O6_real,
	O7_imag,
	O7_real,
	sampler_rx
);
input [15:0] O0_imag;
input [15:0] O0_real;
input [15:0] O1_imag;
input [15:0] O1_real;
input [15:0] O2_imag;
input [15:0] O2_real;
input [15:0] O3_imag;
input [15:0] O3_real;
input [15:0] O4_imag;
input [15:0] O4_real;
input [15:0] O5_imag;
input [15:0] O5_real;
input [15:0] O6_imag;
input [15:0] O6_real;
input [15:0] O7_imag;
input [15:0] O7_real;
input sampler_rx;

reg [15:0] O0_imag_expected;
reg [15:0] O0_real_expected;
reg [15:0] O1_imag_expected;
reg [15:0] O1_real_expected;
reg [15:0] O2_imag_expected;
reg [15:0] O2_real_expected;
reg [15:0] O3_imag_expected;
reg [15:0] O3_real_expected;
reg [15:0] O4_imag_expected;
reg [15:0] O4_real_expected;
reg [15:0] O5_imag_expected;
reg [15:0] O5_real_expected;
reg [15:0] O6_imag_expected;
reg [15:0] O6_real_expected;
reg [15:0] O7_imag_expected;
reg [15:0] O7_real_expected;

reg [15:0] O0_imag_prev;
reg [15:0] O0_real_prev;
reg [15:0] O1_imag_prev;
reg [15:0] O1_real_prev;
reg [15:0] O2_imag_prev;
reg [15:0] O2_real_prev;
reg [15:0] O3_imag_prev;
reg [15:0] O3_real_prev;
reg [15:0] O4_imag_prev;
reg [15:0] O4_real_prev;
reg [15:0] O5_imag_prev;
reg [15:0] O5_real_prev;
reg [15:0] O6_imag_prev;
reg [15:0] O6_real_prev;
reg [15:0] O7_imag_prev;
reg [15:0] O7_real_prev;

reg [15:0] O0_imag_expected_prev;
reg [15:0] O0_real_expected_prev;
reg [15:0] O1_imag_expected_prev;
reg [15:0] O1_real_expected_prev;
reg [15:0] O2_imag_expected_prev;
reg [15:0] O2_real_expected_prev;
reg [15:0] O3_imag_expected_prev;
reg [15:0] O3_real_expected_prev;
reg [15:0] O4_imag_expected_prev;
reg [15:0] O4_real_expected_prev;
reg [15:0] O5_imag_expected_prev;
reg [15:0] O5_real_expected_prev;
reg [15:0] O6_imag_expected_prev;
reg [15:0] O6_real_expected_prev;
reg [15:0] O7_imag_expected_prev;
reg [15:0] O7_real_expected_prev;

reg [15:0] last_O0_imag_exp;
reg [15:0] last_O0_real_exp;
reg [15:0] last_O1_imag_exp;
reg [15:0] last_O1_real_exp;
reg [15:0] last_O2_imag_exp;
reg [15:0] last_O2_real_exp;
reg [15:0] last_O3_imag_exp;
reg [15:0] last_O3_real_exp;
reg [15:0] last_O4_imag_exp;
reg [15:0] last_O4_real_exp;
reg [15:0] last_O5_imag_exp;
reg [15:0] last_O5_real_exp;
reg [15:0] last_O6_imag_exp;
reg [15:0] last_O6_real_exp;
reg [15:0] last_O7_imag_exp;
reg [15:0] last_O7_real_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	O0_imag_prev = O0_imag;
	O0_real_prev = O0_real;
	O1_imag_prev = O1_imag;
	O1_real_prev = O1_real;
	O2_imag_prev = O2_imag;
	O2_real_prev = O2_real;
	O3_imag_prev = O3_imag;
	O3_real_prev = O3_real;
	O4_imag_prev = O4_imag;
	O4_real_prev = O4_real;
	O5_imag_prev = O5_imag;
	O5_real_prev = O5_real;
	O6_imag_prev = O6_imag;
	O6_real_prev = O6_real;
	O7_imag_prev = O7_imag;
	O7_real_prev = O7_real;
end

// update expected /o prevs

always @(trigger)
begin
	O0_imag_expected_prev = O0_imag_expected;
	O0_real_expected_prev = O0_real_expected;
	O1_imag_expected_prev = O1_imag_expected;
	O1_real_expected_prev = O1_real_expected;
	O2_imag_expected_prev = O2_imag_expected;
	O2_real_expected_prev = O2_real_expected;
	O3_imag_expected_prev = O3_imag_expected;
	O3_real_expected_prev = O3_real_expected;
	O4_imag_expected_prev = O4_imag_expected;
	O4_real_expected_prev = O4_real_expected;
	O5_imag_expected_prev = O5_imag_expected;
	O5_real_expected_prev = O5_real_expected;
	O6_imag_expected_prev = O6_imag_expected;
	O6_real_expected_prev = O6_real_expected;
	O7_imag_expected_prev = O7_imag_expected;
	O7_real_expected_prev = O7_real_expected;
end


// expected O0_imag[ 15 ]
initial
begin
	O0_imag_expected[15] = 1'bX;
end 
// expected O0_imag[ 14 ]
initial
begin
	O0_imag_expected[14] = 1'bX;
end 
// expected O0_imag[ 13 ]
initial
begin
	O0_imag_expected[13] = 1'bX;
end 
// expected O0_imag[ 12 ]
initial
begin
	O0_imag_expected[12] = 1'bX;
end 
// expected O0_imag[ 11 ]
initial
begin
	O0_imag_expected[11] = 1'bX;
end 
// expected O0_imag[ 10 ]
initial
begin
	O0_imag_expected[10] = 1'bX;
end 
// expected O0_imag[ 9 ]
initial
begin
	O0_imag_expected[9] = 1'bX;
end 
// expected O0_imag[ 8 ]
initial
begin
	O0_imag_expected[8] = 1'bX;
end 
// expected O0_imag[ 7 ]
initial
begin
	O0_imag_expected[7] = 1'bX;
end 
// expected O0_imag[ 6 ]
initial
begin
	O0_imag_expected[6] = 1'bX;
end 
// expected O0_imag[ 5 ]
initial
begin
	O0_imag_expected[5] = 1'bX;
end 
// expected O0_imag[ 4 ]
initial
begin
	O0_imag_expected[4] = 1'bX;
end 
// expected O0_imag[ 3 ]
initial
begin
	O0_imag_expected[3] = 1'bX;
end 
// expected O0_imag[ 2 ]
initial
begin
	O0_imag_expected[2] = 1'bX;
end 
// expected O0_imag[ 1 ]
initial
begin
	O0_imag_expected[1] = 1'bX;
end 
// expected O0_imag[ 0 ]
initial
begin
	O0_imag_expected[0] = 1'bX;
end 
// expected O0_real[ 15 ]
initial
begin
	O0_real_expected[15] = 1'bX;
end 
// expected O0_real[ 14 ]
initial
begin
	O0_real_expected[14] = 1'bX;
end 
// expected O0_real[ 13 ]
initial
begin
	O0_real_expected[13] = 1'bX;
end 
// expected O0_real[ 12 ]
initial
begin
	O0_real_expected[12] = 1'bX;
end 
// expected O0_real[ 11 ]
initial
begin
	O0_real_expected[11] = 1'bX;
end 
// expected O0_real[ 10 ]
initial
begin
	O0_real_expected[10] = 1'bX;
end 
// expected O0_real[ 9 ]
initial
begin
	O0_real_expected[9] = 1'bX;
end 
// expected O0_real[ 8 ]
initial
begin
	O0_real_expected[8] = 1'bX;
end 
// expected O0_real[ 7 ]
initial
begin
	O0_real_expected[7] = 1'bX;
end 
// expected O0_real[ 6 ]
initial
begin
	O0_real_expected[6] = 1'bX;
end 
// expected O0_real[ 5 ]
initial
begin
	O0_real_expected[5] = 1'bX;
end 
// expected O0_real[ 4 ]
initial
begin
	O0_real_expected[4] = 1'bX;
end 
// expected O0_real[ 3 ]
initial
begin
	O0_real_expected[3] = 1'bX;
end 
// expected O0_real[ 2 ]
initial
begin
	O0_real_expected[2] = 1'bX;
end 
// expected O0_real[ 1 ]
initial
begin
	O0_real_expected[1] = 1'bX;
end 
// expected O0_real[ 0 ]
initial
begin
	O0_real_expected[0] = 1'bX;
end 
// expected O1_imag[ 15 ]
initial
begin
	O1_imag_expected[15] = 1'bX;
end 
// expected O1_imag[ 14 ]
initial
begin
	O1_imag_expected[14] = 1'bX;
end 
// expected O1_imag[ 13 ]
initial
begin
	O1_imag_expected[13] = 1'bX;
end 
// expected O1_imag[ 12 ]
initial
begin
	O1_imag_expected[12] = 1'bX;
end 
// expected O1_imag[ 11 ]
initial
begin
	O1_imag_expected[11] = 1'bX;
end 
// expected O1_imag[ 10 ]
initial
begin
	O1_imag_expected[10] = 1'bX;
end 
// expected O1_imag[ 9 ]
initial
begin
	O1_imag_expected[9] = 1'bX;
end 
// expected O1_imag[ 8 ]
initial
begin
	O1_imag_expected[8] = 1'bX;
end 
// expected O1_imag[ 7 ]
initial
begin
	O1_imag_expected[7] = 1'bX;
end 
// expected O1_imag[ 6 ]
initial
begin
	O1_imag_expected[6] = 1'bX;
end 
// expected O1_imag[ 5 ]
initial
begin
	O1_imag_expected[5] = 1'bX;
end 
// expected O1_imag[ 4 ]
initial
begin
	O1_imag_expected[4] = 1'bX;
end 
// expected O1_imag[ 3 ]
initial
begin
	O1_imag_expected[3] = 1'bX;
end 
// expected O1_imag[ 2 ]
initial
begin
	O1_imag_expected[2] = 1'bX;
end 
// expected O1_imag[ 1 ]
initial
begin
	O1_imag_expected[1] = 1'bX;
end 
// expected O1_imag[ 0 ]
initial
begin
	O1_imag_expected[0] = 1'bX;
end 
// expected O1_real[ 15 ]
initial
begin
	O1_real_expected[15] = 1'bX;
end 
// expected O1_real[ 14 ]
initial
begin
	O1_real_expected[14] = 1'bX;
end 
// expected O1_real[ 13 ]
initial
begin
	O1_real_expected[13] = 1'bX;
end 
// expected O1_real[ 12 ]
initial
begin
	O1_real_expected[12] = 1'bX;
end 
// expected O1_real[ 11 ]
initial
begin
	O1_real_expected[11] = 1'bX;
end 
// expected O1_real[ 10 ]
initial
begin
	O1_real_expected[10] = 1'bX;
end 
// expected O1_real[ 9 ]
initial
begin
	O1_real_expected[9] = 1'bX;
end 
// expected O1_real[ 8 ]
initial
begin
	O1_real_expected[8] = 1'bX;
end 
// expected O1_real[ 7 ]
initial
begin
	O1_real_expected[7] = 1'bX;
end 
// expected O1_real[ 6 ]
initial
begin
	O1_real_expected[6] = 1'bX;
end 
// expected O1_real[ 5 ]
initial
begin
	O1_real_expected[5] = 1'bX;
end 
// expected O1_real[ 4 ]
initial
begin
	O1_real_expected[4] = 1'bX;
end 
// expected O1_real[ 3 ]
initial
begin
	O1_real_expected[3] = 1'bX;
end 
// expected O1_real[ 2 ]
initial
begin
	O1_real_expected[2] = 1'bX;
end 
// expected O1_real[ 1 ]
initial
begin
	O1_real_expected[1] = 1'bX;
end 
// expected O1_real[ 0 ]
initial
begin
	O1_real_expected[0] = 1'bX;
end 
// expected O2_imag[ 15 ]
initial
begin
	O2_imag_expected[15] = 1'bX;
end 
// expected O2_imag[ 14 ]
initial
begin
	O2_imag_expected[14] = 1'bX;
end 
// expected O2_imag[ 13 ]
initial
begin
	O2_imag_expected[13] = 1'bX;
end 
// expected O2_imag[ 12 ]
initial
begin
	O2_imag_expected[12] = 1'bX;
end 
// expected O2_imag[ 11 ]
initial
begin
	O2_imag_expected[11] = 1'bX;
end 
// expected O2_imag[ 10 ]
initial
begin
	O2_imag_expected[10] = 1'bX;
end 
// expected O2_imag[ 9 ]
initial
begin
	O2_imag_expected[9] = 1'bX;
end 
// expected O2_imag[ 8 ]
initial
begin
	O2_imag_expected[8] = 1'bX;
end 
// expected O2_imag[ 7 ]
initial
begin
	O2_imag_expected[7] = 1'bX;
end 
// expected O2_imag[ 6 ]
initial
begin
	O2_imag_expected[6] = 1'bX;
end 
// expected O2_imag[ 5 ]
initial
begin
	O2_imag_expected[5] = 1'bX;
end 
// expected O2_imag[ 4 ]
initial
begin
	O2_imag_expected[4] = 1'bX;
end 
// expected O2_imag[ 3 ]
initial
begin
	O2_imag_expected[3] = 1'bX;
end 
// expected O2_imag[ 2 ]
initial
begin
	O2_imag_expected[2] = 1'bX;
end 
// expected O2_imag[ 1 ]
initial
begin
	O2_imag_expected[1] = 1'bX;
end 
// expected O2_imag[ 0 ]
initial
begin
	O2_imag_expected[0] = 1'bX;
end 
// expected O2_real[ 15 ]
initial
begin
	O2_real_expected[15] = 1'bX;
end 
// expected O2_real[ 14 ]
initial
begin
	O2_real_expected[14] = 1'bX;
end 
// expected O2_real[ 13 ]
initial
begin
	O2_real_expected[13] = 1'bX;
end 
// expected O2_real[ 12 ]
initial
begin
	O2_real_expected[12] = 1'bX;
end 
// expected O2_real[ 11 ]
initial
begin
	O2_real_expected[11] = 1'bX;
end 
// expected O2_real[ 10 ]
initial
begin
	O2_real_expected[10] = 1'bX;
end 
// expected O2_real[ 9 ]
initial
begin
	O2_real_expected[9] = 1'bX;
end 
// expected O2_real[ 8 ]
initial
begin
	O2_real_expected[8] = 1'bX;
end 
// expected O2_real[ 7 ]
initial
begin
	O2_real_expected[7] = 1'bX;
end 
// expected O2_real[ 6 ]
initial
begin
	O2_real_expected[6] = 1'bX;
end 
// expected O2_real[ 5 ]
initial
begin
	O2_real_expected[5] = 1'bX;
end 
// expected O2_real[ 4 ]
initial
begin
	O2_real_expected[4] = 1'bX;
end 
// expected O2_real[ 3 ]
initial
begin
	O2_real_expected[3] = 1'bX;
end 
// expected O2_real[ 2 ]
initial
begin
	O2_real_expected[2] = 1'bX;
end 
// expected O2_real[ 1 ]
initial
begin
	O2_real_expected[1] = 1'bX;
end 
// expected O2_real[ 0 ]
initial
begin
	O2_real_expected[0] = 1'bX;
end 
// expected O3_imag[ 15 ]
initial
begin
	O3_imag_expected[15] = 1'bX;
end 
// expected O3_imag[ 14 ]
initial
begin
	O3_imag_expected[14] = 1'bX;
end 
// expected O3_imag[ 13 ]
initial
begin
	O3_imag_expected[13] = 1'bX;
end 
// expected O3_imag[ 12 ]
initial
begin
	O3_imag_expected[12] = 1'bX;
end 
// expected O3_imag[ 11 ]
initial
begin
	O3_imag_expected[11] = 1'bX;
end 
// expected O3_imag[ 10 ]
initial
begin
	O3_imag_expected[10] = 1'bX;
end 
// expected O3_imag[ 9 ]
initial
begin
	O3_imag_expected[9] = 1'bX;
end 
// expected O3_imag[ 8 ]
initial
begin
	O3_imag_expected[8] = 1'bX;
end 
// expected O3_imag[ 7 ]
initial
begin
	O3_imag_expected[7] = 1'bX;
end 
// expected O3_imag[ 6 ]
initial
begin
	O3_imag_expected[6] = 1'bX;
end 
// expected O3_imag[ 5 ]
initial
begin
	O3_imag_expected[5] = 1'bX;
end 
// expected O3_imag[ 4 ]
initial
begin
	O3_imag_expected[4] = 1'bX;
end 
// expected O3_imag[ 3 ]
initial
begin
	O3_imag_expected[3] = 1'bX;
end 
// expected O3_imag[ 2 ]
initial
begin
	O3_imag_expected[2] = 1'bX;
end 
// expected O3_imag[ 1 ]
initial
begin
	O3_imag_expected[1] = 1'bX;
end 
// expected O3_imag[ 0 ]
initial
begin
	O3_imag_expected[0] = 1'bX;
end 
// expected O3_real[ 15 ]
initial
begin
	O3_real_expected[15] = 1'bX;
end 
// expected O3_real[ 14 ]
initial
begin
	O3_real_expected[14] = 1'bX;
end 
// expected O3_real[ 13 ]
initial
begin
	O3_real_expected[13] = 1'bX;
end 
// expected O3_real[ 12 ]
initial
begin
	O3_real_expected[12] = 1'bX;
end 
// expected O3_real[ 11 ]
initial
begin
	O3_real_expected[11] = 1'bX;
end 
// expected O3_real[ 10 ]
initial
begin
	O3_real_expected[10] = 1'bX;
end 
// expected O3_real[ 9 ]
initial
begin
	O3_real_expected[9] = 1'bX;
end 
// expected O3_real[ 8 ]
initial
begin
	O3_real_expected[8] = 1'bX;
end 
// expected O3_real[ 7 ]
initial
begin
	O3_real_expected[7] = 1'bX;
end 
// expected O3_real[ 6 ]
initial
begin
	O3_real_expected[6] = 1'bX;
end 
// expected O3_real[ 5 ]
initial
begin
	O3_real_expected[5] = 1'bX;
end 
// expected O3_real[ 4 ]
initial
begin
	O3_real_expected[4] = 1'bX;
end 
// expected O3_real[ 3 ]
initial
begin
	O3_real_expected[3] = 1'bX;
end 
// expected O3_real[ 2 ]
initial
begin
	O3_real_expected[2] = 1'bX;
end 
// expected O3_real[ 1 ]
initial
begin
	O3_real_expected[1] = 1'bX;
end 
// expected O3_real[ 0 ]
initial
begin
	O3_real_expected[0] = 1'bX;
end 
// expected O4_imag[ 15 ]
initial
begin
	O4_imag_expected[15] = 1'bX;
end 
// expected O4_imag[ 14 ]
initial
begin
	O4_imag_expected[14] = 1'bX;
end 
// expected O4_imag[ 13 ]
initial
begin
	O4_imag_expected[13] = 1'bX;
end 
// expected O4_imag[ 12 ]
initial
begin
	O4_imag_expected[12] = 1'bX;
end 
// expected O4_imag[ 11 ]
initial
begin
	O4_imag_expected[11] = 1'bX;
end 
// expected O4_imag[ 10 ]
initial
begin
	O4_imag_expected[10] = 1'bX;
end 
// expected O4_imag[ 9 ]
initial
begin
	O4_imag_expected[9] = 1'bX;
end 
// expected O4_imag[ 8 ]
initial
begin
	O4_imag_expected[8] = 1'bX;
end 
// expected O4_imag[ 7 ]
initial
begin
	O4_imag_expected[7] = 1'bX;
end 
// expected O4_imag[ 6 ]
initial
begin
	O4_imag_expected[6] = 1'bX;
end 
// expected O4_imag[ 5 ]
initial
begin
	O4_imag_expected[5] = 1'bX;
end 
// expected O4_imag[ 4 ]
initial
begin
	O4_imag_expected[4] = 1'bX;
end 
// expected O4_imag[ 3 ]
initial
begin
	O4_imag_expected[3] = 1'bX;
end 
// expected O4_imag[ 2 ]
initial
begin
	O4_imag_expected[2] = 1'bX;
end 
// expected O4_imag[ 1 ]
initial
begin
	O4_imag_expected[1] = 1'bX;
end 
// expected O4_imag[ 0 ]
initial
begin
	O4_imag_expected[0] = 1'bX;
end 
// expected O4_real[ 15 ]
initial
begin
	O4_real_expected[15] = 1'bX;
end 
// expected O4_real[ 14 ]
initial
begin
	O4_real_expected[14] = 1'bX;
end 
// expected O4_real[ 13 ]
initial
begin
	O4_real_expected[13] = 1'bX;
end 
// expected O4_real[ 12 ]
initial
begin
	O4_real_expected[12] = 1'bX;
end 
// expected O4_real[ 11 ]
initial
begin
	O4_real_expected[11] = 1'bX;
end 
// expected O4_real[ 10 ]
initial
begin
	O4_real_expected[10] = 1'bX;
end 
// expected O4_real[ 9 ]
initial
begin
	O4_real_expected[9] = 1'bX;
end 
// expected O4_real[ 8 ]
initial
begin
	O4_real_expected[8] = 1'bX;
end 
// expected O4_real[ 7 ]
initial
begin
	O4_real_expected[7] = 1'bX;
end 
// expected O4_real[ 6 ]
initial
begin
	O4_real_expected[6] = 1'bX;
end 
// expected O4_real[ 5 ]
initial
begin
	O4_real_expected[5] = 1'bX;
end 
// expected O4_real[ 4 ]
initial
begin
	O4_real_expected[4] = 1'bX;
end 
// expected O4_real[ 3 ]
initial
begin
	O4_real_expected[3] = 1'bX;
end 
// expected O4_real[ 2 ]
initial
begin
	O4_real_expected[2] = 1'bX;
end 
// expected O4_real[ 1 ]
initial
begin
	O4_real_expected[1] = 1'bX;
end 
// expected O4_real[ 0 ]
initial
begin
	O4_real_expected[0] = 1'bX;
end 
// expected O5_imag[ 15 ]
initial
begin
	O5_imag_expected[15] = 1'bX;
end 
// expected O5_imag[ 14 ]
initial
begin
	O5_imag_expected[14] = 1'bX;
end 
// expected O5_imag[ 13 ]
initial
begin
	O5_imag_expected[13] = 1'bX;
end 
// expected O5_imag[ 12 ]
initial
begin
	O5_imag_expected[12] = 1'bX;
end 
// expected O5_imag[ 11 ]
initial
begin
	O5_imag_expected[11] = 1'bX;
end 
// expected O5_imag[ 10 ]
initial
begin
	O5_imag_expected[10] = 1'bX;
end 
// expected O5_imag[ 9 ]
initial
begin
	O5_imag_expected[9] = 1'bX;
end 
// expected O5_imag[ 8 ]
initial
begin
	O5_imag_expected[8] = 1'bX;
end 
// expected O5_imag[ 7 ]
initial
begin
	O5_imag_expected[7] = 1'bX;
end 
// expected O5_imag[ 6 ]
initial
begin
	O5_imag_expected[6] = 1'bX;
end 
// expected O5_imag[ 5 ]
initial
begin
	O5_imag_expected[5] = 1'bX;
end 
// expected O5_imag[ 4 ]
initial
begin
	O5_imag_expected[4] = 1'bX;
end 
// expected O5_imag[ 3 ]
initial
begin
	O5_imag_expected[3] = 1'bX;
end 
// expected O5_imag[ 2 ]
initial
begin
	O5_imag_expected[2] = 1'bX;
end 
// expected O5_imag[ 1 ]
initial
begin
	O5_imag_expected[1] = 1'bX;
end 
// expected O5_imag[ 0 ]
initial
begin
	O5_imag_expected[0] = 1'bX;
end 
// expected O5_real[ 15 ]
initial
begin
	O5_real_expected[15] = 1'bX;
end 
// expected O5_real[ 14 ]
initial
begin
	O5_real_expected[14] = 1'bX;
end 
// expected O5_real[ 13 ]
initial
begin
	O5_real_expected[13] = 1'bX;
end 
// expected O5_real[ 12 ]
initial
begin
	O5_real_expected[12] = 1'bX;
end 
// expected O5_real[ 11 ]
initial
begin
	O5_real_expected[11] = 1'bX;
end 
// expected O5_real[ 10 ]
initial
begin
	O5_real_expected[10] = 1'bX;
end 
// expected O5_real[ 9 ]
initial
begin
	O5_real_expected[9] = 1'bX;
end 
// expected O5_real[ 8 ]
initial
begin
	O5_real_expected[8] = 1'bX;
end 
// expected O5_real[ 7 ]
initial
begin
	O5_real_expected[7] = 1'bX;
end 
// expected O5_real[ 6 ]
initial
begin
	O5_real_expected[6] = 1'bX;
end 
// expected O5_real[ 5 ]
initial
begin
	O5_real_expected[5] = 1'bX;
end 
// expected O5_real[ 4 ]
initial
begin
	O5_real_expected[4] = 1'bX;
end 
// expected O5_real[ 3 ]
initial
begin
	O5_real_expected[3] = 1'bX;
end 
// expected O5_real[ 2 ]
initial
begin
	O5_real_expected[2] = 1'bX;
end 
// expected O5_real[ 1 ]
initial
begin
	O5_real_expected[1] = 1'bX;
end 
// expected O5_real[ 0 ]
initial
begin
	O5_real_expected[0] = 1'bX;
end 
// expected O6_imag[ 15 ]
initial
begin
	O6_imag_expected[15] = 1'bX;
end 
// expected O6_imag[ 14 ]
initial
begin
	O6_imag_expected[14] = 1'bX;
end 
// expected O6_imag[ 13 ]
initial
begin
	O6_imag_expected[13] = 1'bX;
end 
// expected O6_imag[ 12 ]
initial
begin
	O6_imag_expected[12] = 1'bX;
end 
// expected O6_imag[ 11 ]
initial
begin
	O6_imag_expected[11] = 1'bX;
end 
// expected O6_imag[ 10 ]
initial
begin
	O6_imag_expected[10] = 1'bX;
end 
// expected O6_imag[ 9 ]
initial
begin
	O6_imag_expected[9] = 1'bX;
end 
// expected O6_imag[ 8 ]
initial
begin
	O6_imag_expected[8] = 1'bX;
end 
// expected O6_imag[ 7 ]
initial
begin
	O6_imag_expected[7] = 1'bX;
end 
// expected O6_imag[ 6 ]
initial
begin
	O6_imag_expected[6] = 1'bX;
end 
// expected O6_imag[ 5 ]
initial
begin
	O6_imag_expected[5] = 1'bX;
end 
// expected O6_imag[ 4 ]
initial
begin
	O6_imag_expected[4] = 1'bX;
end 
// expected O6_imag[ 3 ]
initial
begin
	O6_imag_expected[3] = 1'bX;
end 
// expected O6_imag[ 2 ]
initial
begin
	O6_imag_expected[2] = 1'bX;
end 
// expected O6_imag[ 1 ]
initial
begin
	O6_imag_expected[1] = 1'bX;
end 
// expected O6_imag[ 0 ]
initial
begin
	O6_imag_expected[0] = 1'bX;
end 
// expected O6_real[ 15 ]
initial
begin
	O6_real_expected[15] = 1'bX;
end 
// expected O6_real[ 14 ]
initial
begin
	O6_real_expected[14] = 1'bX;
end 
// expected O6_real[ 13 ]
initial
begin
	O6_real_expected[13] = 1'bX;
end 
// expected O6_real[ 12 ]
initial
begin
	O6_real_expected[12] = 1'bX;
end 
// expected O6_real[ 11 ]
initial
begin
	O6_real_expected[11] = 1'bX;
end 
// expected O6_real[ 10 ]
initial
begin
	O6_real_expected[10] = 1'bX;
end 
// expected O6_real[ 9 ]
initial
begin
	O6_real_expected[9] = 1'bX;
end 
// expected O6_real[ 8 ]
initial
begin
	O6_real_expected[8] = 1'bX;
end 
// expected O6_real[ 7 ]
initial
begin
	O6_real_expected[7] = 1'bX;
end 
// expected O6_real[ 6 ]
initial
begin
	O6_real_expected[6] = 1'bX;
end 
// expected O6_real[ 5 ]
initial
begin
	O6_real_expected[5] = 1'bX;
end 
// expected O6_real[ 4 ]
initial
begin
	O6_real_expected[4] = 1'bX;
end 
// expected O6_real[ 3 ]
initial
begin
	O6_real_expected[3] = 1'bX;
end 
// expected O6_real[ 2 ]
initial
begin
	O6_real_expected[2] = 1'bX;
end 
// expected O6_real[ 1 ]
initial
begin
	O6_real_expected[1] = 1'bX;
end 
// expected O6_real[ 0 ]
initial
begin
	O6_real_expected[0] = 1'bX;
end 
// expected O7_imag[ 15 ]
initial
begin
	O7_imag_expected[15] = 1'bX;
end 
// expected O7_imag[ 14 ]
initial
begin
	O7_imag_expected[14] = 1'bX;
end 
// expected O7_imag[ 13 ]
initial
begin
	O7_imag_expected[13] = 1'bX;
end 
// expected O7_imag[ 12 ]
initial
begin
	O7_imag_expected[12] = 1'bX;
end 
// expected O7_imag[ 11 ]
initial
begin
	O7_imag_expected[11] = 1'bX;
end 
// expected O7_imag[ 10 ]
initial
begin
	O7_imag_expected[10] = 1'bX;
end 
// expected O7_imag[ 9 ]
initial
begin
	O7_imag_expected[9] = 1'bX;
end 
// expected O7_imag[ 8 ]
initial
begin
	O7_imag_expected[8] = 1'bX;
end 
// expected O7_imag[ 7 ]
initial
begin
	O7_imag_expected[7] = 1'bX;
end 
// expected O7_imag[ 6 ]
initial
begin
	O7_imag_expected[6] = 1'bX;
end 
// expected O7_imag[ 5 ]
initial
begin
	O7_imag_expected[5] = 1'bX;
end 
// expected O7_imag[ 4 ]
initial
begin
	O7_imag_expected[4] = 1'bX;
end 
// expected O7_imag[ 3 ]
initial
begin
	O7_imag_expected[3] = 1'bX;
end 
// expected O7_imag[ 2 ]
initial
begin
	O7_imag_expected[2] = 1'bX;
end 
// expected O7_imag[ 1 ]
initial
begin
	O7_imag_expected[1] = 1'bX;
end 
// expected O7_imag[ 0 ]
initial
begin
	O7_imag_expected[0] = 1'bX;
end 
// expected O7_real[ 15 ]
initial
begin
	O7_real_expected[15] = 1'bX;
end 
// expected O7_real[ 14 ]
initial
begin
	O7_real_expected[14] = 1'bX;
end 
// expected O7_real[ 13 ]
initial
begin
	O7_real_expected[13] = 1'bX;
end 
// expected O7_real[ 12 ]
initial
begin
	O7_real_expected[12] = 1'bX;
end 
// expected O7_real[ 11 ]
initial
begin
	O7_real_expected[11] = 1'bX;
end 
// expected O7_real[ 10 ]
initial
begin
	O7_real_expected[10] = 1'bX;
end 
// expected O7_real[ 9 ]
initial
begin
	O7_real_expected[9] = 1'bX;
end 
// expected O7_real[ 8 ]
initial
begin
	O7_real_expected[8] = 1'bX;
end 
// expected O7_real[ 7 ]
initial
begin
	O7_real_expected[7] = 1'bX;
end 
// expected O7_real[ 6 ]
initial
begin
	O7_real_expected[6] = 1'bX;
end 
// expected O7_real[ 5 ]
initial
begin
	O7_real_expected[5] = 1'bX;
end 
// expected O7_real[ 4 ]
initial
begin
	O7_real_expected[4] = 1'bX;
end 
// expected O7_real[ 3 ]
initial
begin
	O7_real_expected[3] = 1'bX;
end 
// expected O7_real[ 2 ]
initial
begin
	O7_real_expected[2] = 1'bX;
end 
// expected O7_real[ 1 ]
initial
begin
	O7_real_expected[1] = 1'bX;
end 
// expected O7_real[ 0 ]
initial
begin
	O7_real_expected[0] = 1'bX;
end 
// generate trigger
always @(O0_imag_expected or O0_imag or O0_real_expected or O0_real or O1_imag_expected or O1_imag or O1_real_expected or O1_real or O2_imag_expected or O2_imag or O2_real_expected or O2_real or O3_imag_expected or O3_imag or O3_real_expected or O3_real or O4_imag_expected or O4_imag or O4_real_expected or O4_real or O5_imag_expected or O5_imag or O5_real_expected or O5_real or O6_imag_expected or O6_imag or O6_real_expected or O6_real or O7_imag_expected or O7_imag or O7_real_expected or O7_real)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected O0_imag = %b | expected O0_real = %b | expected O1_imag = %b | expected O1_real = %b | expected O2_imag = %b | expected O2_real = %b | expected O3_imag = %b | expected O3_real = %b | expected O4_imag = %b | expected O4_real = %b | expected O5_imag = %b | expected O5_real = %b | expected O6_imag = %b | expected O6_real = %b | expected O7_imag = %b | expected O7_real = %b | ",O0_imag_expected_prev,O0_real_expected_prev,O1_imag_expected_prev,O1_real_expected_prev,O2_imag_expected_prev,O2_real_expected_prev,O3_imag_expected_prev,O3_real_expected_prev,O4_imag_expected_prev,O4_real_expected_prev,O5_imag_expected_prev,O5_real_expected_prev,O6_imag_expected_prev,O6_real_expected_prev,O7_imag_expected_prev,O7_real_expected_prev);
	$display("| real O0_imag = %b | real O0_real = %b | real O1_imag = %b | real O1_real = %b | real O2_imag = %b | real O2_real = %b | real O3_imag = %b | real O3_real = %b | real O4_imag = %b | real O4_real = %b | real O5_imag = %b | real O5_real = %b | real O6_imag = %b | real O6_real = %b | real O7_imag = %b | real O7_real = %b | ",O0_imag_prev,O0_real_prev,O1_imag_prev,O1_real_prev,O2_imag_prev,O2_real_prev,O3_imag_prev,O3_real_prev,O4_imag_prev,O4_real_prev,O5_imag_prev,O5_real_prev,O6_imag_prev,O6_real_prev,O7_imag_prev,O7_real_prev);
`endif
	if (
		( O0_imag_expected_prev[0] !== 1'bx ) && ( O0_imag_prev[0] !== O0_imag_expected_prev[0] )
		&& ((O0_imag_expected_prev[0] !== last_O0_imag_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[0] = O0_imag_expected_prev[0];
	end
	if (
		( O0_imag_expected_prev[1] !== 1'bx ) && ( O0_imag_prev[1] !== O0_imag_expected_prev[1] )
		&& ((O0_imag_expected_prev[1] !== last_O0_imag_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[1] = O0_imag_expected_prev[1];
	end
	if (
		( O0_imag_expected_prev[2] !== 1'bx ) && ( O0_imag_prev[2] !== O0_imag_expected_prev[2] )
		&& ((O0_imag_expected_prev[2] !== last_O0_imag_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[2] = O0_imag_expected_prev[2];
	end
	if (
		( O0_imag_expected_prev[3] !== 1'bx ) && ( O0_imag_prev[3] !== O0_imag_expected_prev[3] )
		&& ((O0_imag_expected_prev[3] !== last_O0_imag_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[3] = O0_imag_expected_prev[3];
	end
	if (
		( O0_imag_expected_prev[4] !== 1'bx ) && ( O0_imag_prev[4] !== O0_imag_expected_prev[4] )
		&& ((O0_imag_expected_prev[4] !== last_O0_imag_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[4] = O0_imag_expected_prev[4];
	end
	if (
		( O0_imag_expected_prev[5] !== 1'bx ) && ( O0_imag_prev[5] !== O0_imag_expected_prev[5] )
		&& ((O0_imag_expected_prev[5] !== last_O0_imag_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[5] = O0_imag_expected_prev[5];
	end
	if (
		( O0_imag_expected_prev[6] !== 1'bx ) && ( O0_imag_prev[6] !== O0_imag_expected_prev[6] )
		&& ((O0_imag_expected_prev[6] !== last_O0_imag_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[6] = O0_imag_expected_prev[6];
	end
	if (
		( O0_imag_expected_prev[7] !== 1'bx ) && ( O0_imag_prev[7] !== O0_imag_expected_prev[7] )
		&& ((O0_imag_expected_prev[7] !== last_O0_imag_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[7] = O0_imag_expected_prev[7];
	end
	if (
		( O0_imag_expected_prev[8] !== 1'bx ) && ( O0_imag_prev[8] !== O0_imag_expected_prev[8] )
		&& ((O0_imag_expected_prev[8] !== last_O0_imag_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[8] = O0_imag_expected_prev[8];
	end
	if (
		( O0_imag_expected_prev[9] !== 1'bx ) && ( O0_imag_prev[9] !== O0_imag_expected_prev[9] )
		&& ((O0_imag_expected_prev[9] !== last_O0_imag_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[9] = O0_imag_expected_prev[9];
	end
	if (
		( O0_imag_expected_prev[10] !== 1'bx ) && ( O0_imag_prev[10] !== O0_imag_expected_prev[10] )
		&& ((O0_imag_expected_prev[10] !== last_O0_imag_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[10] = O0_imag_expected_prev[10];
	end
	if (
		( O0_imag_expected_prev[11] !== 1'bx ) && ( O0_imag_prev[11] !== O0_imag_expected_prev[11] )
		&& ((O0_imag_expected_prev[11] !== last_O0_imag_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[11] = O0_imag_expected_prev[11];
	end
	if (
		( O0_imag_expected_prev[12] !== 1'bx ) && ( O0_imag_prev[12] !== O0_imag_expected_prev[12] )
		&& ((O0_imag_expected_prev[12] !== last_O0_imag_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[12] = O0_imag_expected_prev[12];
	end
	if (
		( O0_imag_expected_prev[13] !== 1'bx ) && ( O0_imag_prev[13] !== O0_imag_expected_prev[13] )
		&& ((O0_imag_expected_prev[13] !== last_O0_imag_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[13] = O0_imag_expected_prev[13];
	end
	if (
		( O0_imag_expected_prev[14] !== 1'bx ) && ( O0_imag_prev[14] !== O0_imag_expected_prev[14] )
		&& ((O0_imag_expected_prev[14] !== last_O0_imag_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[14] = O0_imag_expected_prev[14];
	end
	if (
		( O0_imag_expected_prev[15] !== 1'bx ) && ( O0_imag_prev[15] !== O0_imag_expected_prev[15] )
		&& ((O0_imag_expected_prev[15] !== last_O0_imag_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_imag_expected_prev);
		$display ("     Real value = %b", O0_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_O0_imag_exp[15] = O0_imag_expected_prev[15];
	end
	if (
		( O0_real_expected_prev[0] !== 1'bx ) && ( O0_real_prev[0] !== O0_real_expected_prev[0] )
		&& ((O0_real_expected_prev[0] !== last_O0_real_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[0] = O0_real_expected_prev[0];
	end
	if (
		( O0_real_expected_prev[1] !== 1'bx ) && ( O0_real_prev[1] !== O0_real_expected_prev[1] )
		&& ((O0_real_expected_prev[1] !== last_O0_real_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[1] = O0_real_expected_prev[1];
	end
	if (
		( O0_real_expected_prev[2] !== 1'bx ) && ( O0_real_prev[2] !== O0_real_expected_prev[2] )
		&& ((O0_real_expected_prev[2] !== last_O0_real_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[2] = O0_real_expected_prev[2];
	end
	if (
		( O0_real_expected_prev[3] !== 1'bx ) && ( O0_real_prev[3] !== O0_real_expected_prev[3] )
		&& ((O0_real_expected_prev[3] !== last_O0_real_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[3] = O0_real_expected_prev[3];
	end
	if (
		( O0_real_expected_prev[4] !== 1'bx ) && ( O0_real_prev[4] !== O0_real_expected_prev[4] )
		&& ((O0_real_expected_prev[4] !== last_O0_real_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[4] = O0_real_expected_prev[4];
	end
	if (
		( O0_real_expected_prev[5] !== 1'bx ) && ( O0_real_prev[5] !== O0_real_expected_prev[5] )
		&& ((O0_real_expected_prev[5] !== last_O0_real_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[5] = O0_real_expected_prev[5];
	end
	if (
		( O0_real_expected_prev[6] !== 1'bx ) && ( O0_real_prev[6] !== O0_real_expected_prev[6] )
		&& ((O0_real_expected_prev[6] !== last_O0_real_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[6] = O0_real_expected_prev[6];
	end
	if (
		( O0_real_expected_prev[7] !== 1'bx ) && ( O0_real_prev[7] !== O0_real_expected_prev[7] )
		&& ((O0_real_expected_prev[7] !== last_O0_real_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[7] = O0_real_expected_prev[7];
	end
	if (
		( O0_real_expected_prev[8] !== 1'bx ) && ( O0_real_prev[8] !== O0_real_expected_prev[8] )
		&& ((O0_real_expected_prev[8] !== last_O0_real_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[8] = O0_real_expected_prev[8];
	end
	if (
		( O0_real_expected_prev[9] !== 1'bx ) && ( O0_real_prev[9] !== O0_real_expected_prev[9] )
		&& ((O0_real_expected_prev[9] !== last_O0_real_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[9] = O0_real_expected_prev[9];
	end
	if (
		( O0_real_expected_prev[10] !== 1'bx ) && ( O0_real_prev[10] !== O0_real_expected_prev[10] )
		&& ((O0_real_expected_prev[10] !== last_O0_real_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[10] = O0_real_expected_prev[10];
	end
	if (
		( O0_real_expected_prev[11] !== 1'bx ) && ( O0_real_prev[11] !== O0_real_expected_prev[11] )
		&& ((O0_real_expected_prev[11] !== last_O0_real_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[11] = O0_real_expected_prev[11];
	end
	if (
		( O0_real_expected_prev[12] !== 1'bx ) && ( O0_real_prev[12] !== O0_real_expected_prev[12] )
		&& ((O0_real_expected_prev[12] !== last_O0_real_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[12] = O0_real_expected_prev[12];
	end
	if (
		( O0_real_expected_prev[13] !== 1'bx ) && ( O0_real_prev[13] !== O0_real_expected_prev[13] )
		&& ((O0_real_expected_prev[13] !== last_O0_real_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[13] = O0_real_expected_prev[13];
	end
	if (
		( O0_real_expected_prev[14] !== 1'bx ) && ( O0_real_prev[14] !== O0_real_expected_prev[14] )
		&& ((O0_real_expected_prev[14] !== last_O0_real_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[14] = O0_real_expected_prev[14];
	end
	if (
		( O0_real_expected_prev[15] !== 1'bx ) && ( O0_real_prev[15] !== O0_real_expected_prev[15] )
		&& ((O0_real_expected_prev[15] !== last_O0_real_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O0_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O0_real_expected_prev);
		$display ("     Real value = %b", O0_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_O0_real_exp[15] = O0_real_expected_prev[15];
	end
	if (
		( O1_imag_expected_prev[0] !== 1'bx ) && ( O1_imag_prev[0] !== O1_imag_expected_prev[0] )
		&& ((O1_imag_expected_prev[0] !== last_O1_imag_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[0] = O1_imag_expected_prev[0];
	end
	if (
		( O1_imag_expected_prev[1] !== 1'bx ) && ( O1_imag_prev[1] !== O1_imag_expected_prev[1] )
		&& ((O1_imag_expected_prev[1] !== last_O1_imag_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[1] = O1_imag_expected_prev[1];
	end
	if (
		( O1_imag_expected_prev[2] !== 1'bx ) && ( O1_imag_prev[2] !== O1_imag_expected_prev[2] )
		&& ((O1_imag_expected_prev[2] !== last_O1_imag_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[2] = O1_imag_expected_prev[2];
	end
	if (
		( O1_imag_expected_prev[3] !== 1'bx ) && ( O1_imag_prev[3] !== O1_imag_expected_prev[3] )
		&& ((O1_imag_expected_prev[3] !== last_O1_imag_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[3] = O1_imag_expected_prev[3];
	end
	if (
		( O1_imag_expected_prev[4] !== 1'bx ) && ( O1_imag_prev[4] !== O1_imag_expected_prev[4] )
		&& ((O1_imag_expected_prev[4] !== last_O1_imag_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[4] = O1_imag_expected_prev[4];
	end
	if (
		( O1_imag_expected_prev[5] !== 1'bx ) && ( O1_imag_prev[5] !== O1_imag_expected_prev[5] )
		&& ((O1_imag_expected_prev[5] !== last_O1_imag_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[5] = O1_imag_expected_prev[5];
	end
	if (
		( O1_imag_expected_prev[6] !== 1'bx ) && ( O1_imag_prev[6] !== O1_imag_expected_prev[6] )
		&& ((O1_imag_expected_prev[6] !== last_O1_imag_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[6] = O1_imag_expected_prev[6];
	end
	if (
		( O1_imag_expected_prev[7] !== 1'bx ) && ( O1_imag_prev[7] !== O1_imag_expected_prev[7] )
		&& ((O1_imag_expected_prev[7] !== last_O1_imag_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[7] = O1_imag_expected_prev[7];
	end
	if (
		( O1_imag_expected_prev[8] !== 1'bx ) && ( O1_imag_prev[8] !== O1_imag_expected_prev[8] )
		&& ((O1_imag_expected_prev[8] !== last_O1_imag_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[8] = O1_imag_expected_prev[8];
	end
	if (
		( O1_imag_expected_prev[9] !== 1'bx ) && ( O1_imag_prev[9] !== O1_imag_expected_prev[9] )
		&& ((O1_imag_expected_prev[9] !== last_O1_imag_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[9] = O1_imag_expected_prev[9];
	end
	if (
		( O1_imag_expected_prev[10] !== 1'bx ) && ( O1_imag_prev[10] !== O1_imag_expected_prev[10] )
		&& ((O1_imag_expected_prev[10] !== last_O1_imag_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[10] = O1_imag_expected_prev[10];
	end
	if (
		( O1_imag_expected_prev[11] !== 1'bx ) && ( O1_imag_prev[11] !== O1_imag_expected_prev[11] )
		&& ((O1_imag_expected_prev[11] !== last_O1_imag_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[11] = O1_imag_expected_prev[11];
	end
	if (
		( O1_imag_expected_prev[12] !== 1'bx ) && ( O1_imag_prev[12] !== O1_imag_expected_prev[12] )
		&& ((O1_imag_expected_prev[12] !== last_O1_imag_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[12] = O1_imag_expected_prev[12];
	end
	if (
		( O1_imag_expected_prev[13] !== 1'bx ) && ( O1_imag_prev[13] !== O1_imag_expected_prev[13] )
		&& ((O1_imag_expected_prev[13] !== last_O1_imag_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[13] = O1_imag_expected_prev[13];
	end
	if (
		( O1_imag_expected_prev[14] !== 1'bx ) && ( O1_imag_prev[14] !== O1_imag_expected_prev[14] )
		&& ((O1_imag_expected_prev[14] !== last_O1_imag_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[14] = O1_imag_expected_prev[14];
	end
	if (
		( O1_imag_expected_prev[15] !== 1'bx ) && ( O1_imag_prev[15] !== O1_imag_expected_prev[15] )
		&& ((O1_imag_expected_prev[15] !== last_O1_imag_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_imag_expected_prev);
		$display ("     Real value = %b", O1_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O1_imag_exp[15] = O1_imag_expected_prev[15];
	end
	if (
		( O1_real_expected_prev[0] !== 1'bx ) && ( O1_real_prev[0] !== O1_real_expected_prev[0] )
		&& ((O1_real_expected_prev[0] !== last_O1_real_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[0] = O1_real_expected_prev[0];
	end
	if (
		( O1_real_expected_prev[1] !== 1'bx ) && ( O1_real_prev[1] !== O1_real_expected_prev[1] )
		&& ((O1_real_expected_prev[1] !== last_O1_real_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[1] = O1_real_expected_prev[1];
	end
	if (
		( O1_real_expected_prev[2] !== 1'bx ) && ( O1_real_prev[2] !== O1_real_expected_prev[2] )
		&& ((O1_real_expected_prev[2] !== last_O1_real_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[2] = O1_real_expected_prev[2];
	end
	if (
		( O1_real_expected_prev[3] !== 1'bx ) && ( O1_real_prev[3] !== O1_real_expected_prev[3] )
		&& ((O1_real_expected_prev[3] !== last_O1_real_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[3] = O1_real_expected_prev[3];
	end
	if (
		( O1_real_expected_prev[4] !== 1'bx ) && ( O1_real_prev[4] !== O1_real_expected_prev[4] )
		&& ((O1_real_expected_prev[4] !== last_O1_real_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[4] = O1_real_expected_prev[4];
	end
	if (
		( O1_real_expected_prev[5] !== 1'bx ) && ( O1_real_prev[5] !== O1_real_expected_prev[5] )
		&& ((O1_real_expected_prev[5] !== last_O1_real_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[5] = O1_real_expected_prev[5];
	end
	if (
		( O1_real_expected_prev[6] !== 1'bx ) && ( O1_real_prev[6] !== O1_real_expected_prev[6] )
		&& ((O1_real_expected_prev[6] !== last_O1_real_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[6] = O1_real_expected_prev[6];
	end
	if (
		( O1_real_expected_prev[7] !== 1'bx ) && ( O1_real_prev[7] !== O1_real_expected_prev[7] )
		&& ((O1_real_expected_prev[7] !== last_O1_real_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[7] = O1_real_expected_prev[7];
	end
	if (
		( O1_real_expected_prev[8] !== 1'bx ) && ( O1_real_prev[8] !== O1_real_expected_prev[8] )
		&& ((O1_real_expected_prev[8] !== last_O1_real_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[8] = O1_real_expected_prev[8];
	end
	if (
		( O1_real_expected_prev[9] !== 1'bx ) && ( O1_real_prev[9] !== O1_real_expected_prev[9] )
		&& ((O1_real_expected_prev[9] !== last_O1_real_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[9] = O1_real_expected_prev[9];
	end
	if (
		( O1_real_expected_prev[10] !== 1'bx ) && ( O1_real_prev[10] !== O1_real_expected_prev[10] )
		&& ((O1_real_expected_prev[10] !== last_O1_real_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[10] = O1_real_expected_prev[10];
	end
	if (
		( O1_real_expected_prev[11] !== 1'bx ) && ( O1_real_prev[11] !== O1_real_expected_prev[11] )
		&& ((O1_real_expected_prev[11] !== last_O1_real_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[11] = O1_real_expected_prev[11];
	end
	if (
		( O1_real_expected_prev[12] !== 1'bx ) && ( O1_real_prev[12] !== O1_real_expected_prev[12] )
		&& ((O1_real_expected_prev[12] !== last_O1_real_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[12] = O1_real_expected_prev[12];
	end
	if (
		( O1_real_expected_prev[13] !== 1'bx ) && ( O1_real_prev[13] !== O1_real_expected_prev[13] )
		&& ((O1_real_expected_prev[13] !== last_O1_real_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[13] = O1_real_expected_prev[13];
	end
	if (
		( O1_real_expected_prev[14] !== 1'bx ) && ( O1_real_prev[14] !== O1_real_expected_prev[14] )
		&& ((O1_real_expected_prev[14] !== last_O1_real_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[14] = O1_real_expected_prev[14];
	end
	if (
		( O1_real_expected_prev[15] !== 1'bx ) && ( O1_real_prev[15] !== O1_real_expected_prev[15] )
		&& ((O1_real_expected_prev[15] !== last_O1_real_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O1_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O1_real_expected_prev);
		$display ("     Real value = %b", O1_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_O1_real_exp[15] = O1_real_expected_prev[15];
	end
	if (
		( O2_imag_expected_prev[0] !== 1'bx ) && ( O2_imag_prev[0] !== O2_imag_expected_prev[0] )
		&& ((O2_imag_expected_prev[0] !== last_O2_imag_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[0] = O2_imag_expected_prev[0];
	end
	if (
		( O2_imag_expected_prev[1] !== 1'bx ) && ( O2_imag_prev[1] !== O2_imag_expected_prev[1] )
		&& ((O2_imag_expected_prev[1] !== last_O2_imag_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[1] = O2_imag_expected_prev[1];
	end
	if (
		( O2_imag_expected_prev[2] !== 1'bx ) && ( O2_imag_prev[2] !== O2_imag_expected_prev[2] )
		&& ((O2_imag_expected_prev[2] !== last_O2_imag_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[2] = O2_imag_expected_prev[2];
	end
	if (
		( O2_imag_expected_prev[3] !== 1'bx ) && ( O2_imag_prev[3] !== O2_imag_expected_prev[3] )
		&& ((O2_imag_expected_prev[3] !== last_O2_imag_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[3] = O2_imag_expected_prev[3];
	end
	if (
		( O2_imag_expected_prev[4] !== 1'bx ) && ( O2_imag_prev[4] !== O2_imag_expected_prev[4] )
		&& ((O2_imag_expected_prev[4] !== last_O2_imag_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[4] = O2_imag_expected_prev[4];
	end
	if (
		( O2_imag_expected_prev[5] !== 1'bx ) && ( O2_imag_prev[5] !== O2_imag_expected_prev[5] )
		&& ((O2_imag_expected_prev[5] !== last_O2_imag_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[5] = O2_imag_expected_prev[5];
	end
	if (
		( O2_imag_expected_prev[6] !== 1'bx ) && ( O2_imag_prev[6] !== O2_imag_expected_prev[6] )
		&& ((O2_imag_expected_prev[6] !== last_O2_imag_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[6] = O2_imag_expected_prev[6];
	end
	if (
		( O2_imag_expected_prev[7] !== 1'bx ) && ( O2_imag_prev[7] !== O2_imag_expected_prev[7] )
		&& ((O2_imag_expected_prev[7] !== last_O2_imag_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[7] = O2_imag_expected_prev[7];
	end
	if (
		( O2_imag_expected_prev[8] !== 1'bx ) && ( O2_imag_prev[8] !== O2_imag_expected_prev[8] )
		&& ((O2_imag_expected_prev[8] !== last_O2_imag_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[8] = O2_imag_expected_prev[8];
	end
	if (
		( O2_imag_expected_prev[9] !== 1'bx ) && ( O2_imag_prev[9] !== O2_imag_expected_prev[9] )
		&& ((O2_imag_expected_prev[9] !== last_O2_imag_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[9] = O2_imag_expected_prev[9];
	end
	if (
		( O2_imag_expected_prev[10] !== 1'bx ) && ( O2_imag_prev[10] !== O2_imag_expected_prev[10] )
		&& ((O2_imag_expected_prev[10] !== last_O2_imag_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[10] = O2_imag_expected_prev[10];
	end
	if (
		( O2_imag_expected_prev[11] !== 1'bx ) && ( O2_imag_prev[11] !== O2_imag_expected_prev[11] )
		&& ((O2_imag_expected_prev[11] !== last_O2_imag_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[11] = O2_imag_expected_prev[11];
	end
	if (
		( O2_imag_expected_prev[12] !== 1'bx ) && ( O2_imag_prev[12] !== O2_imag_expected_prev[12] )
		&& ((O2_imag_expected_prev[12] !== last_O2_imag_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[12] = O2_imag_expected_prev[12];
	end
	if (
		( O2_imag_expected_prev[13] !== 1'bx ) && ( O2_imag_prev[13] !== O2_imag_expected_prev[13] )
		&& ((O2_imag_expected_prev[13] !== last_O2_imag_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[13] = O2_imag_expected_prev[13];
	end
	if (
		( O2_imag_expected_prev[14] !== 1'bx ) && ( O2_imag_prev[14] !== O2_imag_expected_prev[14] )
		&& ((O2_imag_expected_prev[14] !== last_O2_imag_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[14] = O2_imag_expected_prev[14];
	end
	if (
		( O2_imag_expected_prev[15] !== 1'bx ) && ( O2_imag_prev[15] !== O2_imag_expected_prev[15] )
		&& ((O2_imag_expected_prev[15] !== last_O2_imag_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_imag_expected_prev);
		$display ("     Real value = %b", O2_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O2_imag_exp[15] = O2_imag_expected_prev[15];
	end
	if (
		( O2_real_expected_prev[0] !== 1'bx ) && ( O2_real_prev[0] !== O2_real_expected_prev[0] )
		&& ((O2_real_expected_prev[0] !== last_O2_real_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[0] = O2_real_expected_prev[0];
	end
	if (
		( O2_real_expected_prev[1] !== 1'bx ) && ( O2_real_prev[1] !== O2_real_expected_prev[1] )
		&& ((O2_real_expected_prev[1] !== last_O2_real_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[1] = O2_real_expected_prev[1];
	end
	if (
		( O2_real_expected_prev[2] !== 1'bx ) && ( O2_real_prev[2] !== O2_real_expected_prev[2] )
		&& ((O2_real_expected_prev[2] !== last_O2_real_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[2] = O2_real_expected_prev[2];
	end
	if (
		( O2_real_expected_prev[3] !== 1'bx ) && ( O2_real_prev[3] !== O2_real_expected_prev[3] )
		&& ((O2_real_expected_prev[3] !== last_O2_real_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[3] = O2_real_expected_prev[3];
	end
	if (
		( O2_real_expected_prev[4] !== 1'bx ) && ( O2_real_prev[4] !== O2_real_expected_prev[4] )
		&& ((O2_real_expected_prev[4] !== last_O2_real_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[4] = O2_real_expected_prev[4];
	end
	if (
		( O2_real_expected_prev[5] !== 1'bx ) && ( O2_real_prev[5] !== O2_real_expected_prev[5] )
		&& ((O2_real_expected_prev[5] !== last_O2_real_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[5] = O2_real_expected_prev[5];
	end
	if (
		( O2_real_expected_prev[6] !== 1'bx ) && ( O2_real_prev[6] !== O2_real_expected_prev[6] )
		&& ((O2_real_expected_prev[6] !== last_O2_real_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[6] = O2_real_expected_prev[6];
	end
	if (
		( O2_real_expected_prev[7] !== 1'bx ) && ( O2_real_prev[7] !== O2_real_expected_prev[7] )
		&& ((O2_real_expected_prev[7] !== last_O2_real_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[7] = O2_real_expected_prev[7];
	end
	if (
		( O2_real_expected_prev[8] !== 1'bx ) && ( O2_real_prev[8] !== O2_real_expected_prev[8] )
		&& ((O2_real_expected_prev[8] !== last_O2_real_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[8] = O2_real_expected_prev[8];
	end
	if (
		( O2_real_expected_prev[9] !== 1'bx ) && ( O2_real_prev[9] !== O2_real_expected_prev[9] )
		&& ((O2_real_expected_prev[9] !== last_O2_real_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[9] = O2_real_expected_prev[9];
	end
	if (
		( O2_real_expected_prev[10] !== 1'bx ) && ( O2_real_prev[10] !== O2_real_expected_prev[10] )
		&& ((O2_real_expected_prev[10] !== last_O2_real_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[10] = O2_real_expected_prev[10];
	end
	if (
		( O2_real_expected_prev[11] !== 1'bx ) && ( O2_real_prev[11] !== O2_real_expected_prev[11] )
		&& ((O2_real_expected_prev[11] !== last_O2_real_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[11] = O2_real_expected_prev[11];
	end
	if (
		( O2_real_expected_prev[12] !== 1'bx ) && ( O2_real_prev[12] !== O2_real_expected_prev[12] )
		&& ((O2_real_expected_prev[12] !== last_O2_real_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[12] = O2_real_expected_prev[12];
	end
	if (
		( O2_real_expected_prev[13] !== 1'bx ) && ( O2_real_prev[13] !== O2_real_expected_prev[13] )
		&& ((O2_real_expected_prev[13] !== last_O2_real_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[13] = O2_real_expected_prev[13];
	end
	if (
		( O2_real_expected_prev[14] !== 1'bx ) && ( O2_real_prev[14] !== O2_real_expected_prev[14] )
		&& ((O2_real_expected_prev[14] !== last_O2_real_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[14] = O2_real_expected_prev[14];
	end
	if (
		( O2_real_expected_prev[15] !== 1'bx ) && ( O2_real_prev[15] !== O2_real_expected_prev[15] )
		&& ((O2_real_expected_prev[15] !== last_O2_real_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O2_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O2_real_expected_prev);
		$display ("     Real value = %b", O2_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_O2_real_exp[15] = O2_real_expected_prev[15];
	end
	if (
		( O3_imag_expected_prev[0] !== 1'bx ) && ( O3_imag_prev[0] !== O3_imag_expected_prev[0] )
		&& ((O3_imag_expected_prev[0] !== last_O3_imag_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[0] = O3_imag_expected_prev[0];
	end
	if (
		( O3_imag_expected_prev[1] !== 1'bx ) && ( O3_imag_prev[1] !== O3_imag_expected_prev[1] )
		&& ((O3_imag_expected_prev[1] !== last_O3_imag_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[1] = O3_imag_expected_prev[1];
	end
	if (
		( O3_imag_expected_prev[2] !== 1'bx ) && ( O3_imag_prev[2] !== O3_imag_expected_prev[2] )
		&& ((O3_imag_expected_prev[2] !== last_O3_imag_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[2] = O3_imag_expected_prev[2];
	end
	if (
		( O3_imag_expected_prev[3] !== 1'bx ) && ( O3_imag_prev[3] !== O3_imag_expected_prev[3] )
		&& ((O3_imag_expected_prev[3] !== last_O3_imag_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[3] = O3_imag_expected_prev[3];
	end
	if (
		( O3_imag_expected_prev[4] !== 1'bx ) && ( O3_imag_prev[4] !== O3_imag_expected_prev[4] )
		&& ((O3_imag_expected_prev[4] !== last_O3_imag_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[4] = O3_imag_expected_prev[4];
	end
	if (
		( O3_imag_expected_prev[5] !== 1'bx ) && ( O3_imag_prev[5] !== O3_imag_expected_prev[5] )
		&& ((O3_imag_expected_prev[5] !== last_O3_imag_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[5] = O3_imag_expected_prev[5];
	end
	if (
		( O3_imag_expected_prev[6] !== 1'bx ) && ( O3_imag_prev[6] !== O3_imag_expected_prev[6] )
		&& ((O3_imag_expected_prev[6] !== last_O3_imag_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[6] = O3_imag_expected_prev[6];
	end
	if (
		( O3_imag_expected_prev[7] !== 1'bx ) && ( O3_imag_prev[7] !== O3_imag_expected_prev[7] )
		&& ((O3_imag_expected_prev[7] !== last_O3_imag_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[7] = O3_imag_expected_prev[7];
	end
	if (
		( O3_imag_expected_prev[8] !== 1'bx ) && ( O3_imag_prev[8] !== O3_imag_expected_prev[8] )
		&& ((O3_imag_expected_prev[8] !== last_O3_imag_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[8] = O3_imag_expected_prev[8];
	end
	if (
		( O3_imag_expected_prev[9] !== 1'bx ) && ( O3_imag_prev[9] !== O3_imag_expected_prev[9] )
		&& ((O3_imag_expected_prev[9] !== last_O3_imag_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[9] = O3_imag_expected_prev[9];
	end
	if (
		( O3_imag_expected_prev[10] !== 1'bx ) && ( O3_imag_prev[10] !== O3_imag_expected_prev[10] )
		&& ((O3_imag_expected_prev[10] !== last_O3_imag_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[10] = O3_imag_expected_prev[10];
	end
	if (
		( O3_imag_expected_prev[11] !== 1'bx ) && ( O3_imag_prev[11] !== O3_imag_expected_prev[11] )
		&& ((O3_imag_expected_prev[11] !== last_O3_imag_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[11] = O3_imag_expected_prev[11];
	end
	if (
		( O3_imag_expected_prev[12] !== 1'bx ) && ( O3_imag_prev[12] !== O3_imag_expected_prev[12] )
		&& ((O3_imag_expected_prev[12] !== last_O3_imag_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[12] = O3_imag_expected_prev[12];
	end
	if (
		( O3_imag_expected_prev[13] !== 1'bx ) && ( O3_imag_prev[13] !== O3_imag_expected_prev[13] )
		&& ((O3_imag_expected_prev[13] !== last_O3_imag_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[13] = O3_imag_expected_prev[13];
	end
	if (
		( O3_imag_expected_prev[14] !== 1'bx ) && ( O3_imag_prev[14] !== O3_imag_expected_prev[14] )
		&& ((O3_imag_expected_prev[14] !== last_O3_imag_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[14] = O3_imag_expected_prev[14];
	end
	if (
		( O3_imag_expected_prev[15] !== 1'bx ) && ( O3_imag_prev[15] !== O3_imag_expected_prev[15] )
		&& ((O3_imag_expected_prev[15] !== last_O3_imag_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_imag_expected_prev);
		$display ("     Real value = %b", O3_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_O3_imag_exp[15] = O3_imag_expected_prev[15];
	end
	if (
		( O3_real_expected_prev[0] !== 1'bx ) && ( O3_real_prev[0] !== O3_real_expected_prev[0] )
		&& ((O3_real_expected_prev[0] !== last_O3_real_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[0] = O3_real_expected_prev[0];
	end
	if (
		( O3_real_expected_prev[1] !== 1'bx ) && ( O3_real_prev[1] !== O3_real_expected_prev[1] )
		&& ((O3_real_expected_prev[1] !== last_O3_real_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[1] = O3_real_expected_prev[1];
	end
	if (
		( O3_real_expected_prev[2] !== 1'bx ) && ( O3_real_prev[2] !== O3_real_expected_prev[2] )
		&& ((O3_real_expected_prev[2] !== last_O3_real_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[2] = O3_real_expected_prev[2];
	end
	if (
		( O3_real_expected_prev[3] !== 1'bx ) && ( O3_real_prev[3] !== O3_real_expected_prev[3] )
		&& ((O3_real_expected_prev[3] !== last_O3_real_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[3] = O3_real_expected_prev[3];
	end
	if (
		( O3_real_expected_prev[4] !== 1'bx ) && ( O3_real_prev[4] !== O3_real_expected_prev[4] )
		&& ((O3_real_expected_prev[4] !== last_O3_real_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[4] = O3_real_expected_prev[4];
	end
	if (
		( O3_real_expected_prev[5] !== 1'bx ) && ( O3_real_prev[5] !== O3_real_expected_prev[5] )
		&& ((O3_real_expected_prev[5] !== last_O3_real_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[5] = O3_real_expected_prev[5];
	end
	if (
		( O3_real_expected_prev[6] !== 1'bx ) && ( O3_real_prev[6] !== O3_real_expected_prev[6] )
		&& ((O3_real_expected_prev[6] !== last_O3_real_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[6] = O3_real_expected_prev[6];
	end
	if (
		( O3_real_expected_prev[7] !== 1'bx ) && ( O3_real_prev[7] !== O3_real_expected_prev[7] )
		&& ((O3_real_expected_prev[7] !== last_O3_real_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[7] = O3_real_expected_prev[7];
	end
	if (
		( O3_real_expected_prev[8] !== 1'bx ) && ( O3_real_prev[8] !== O3_real_expected_prev[8] )
		&& ((O3_real_expected_prev[8] !== last_O3_real_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[8] = O3_real_expected_prev[8];
	end
	if (
		( O3_real_expected_prev[9] !== 1'bx ) && ( O3_real_prev[9] !== O3_real_expected_prev[9] )
		&& ((O3_real_expected_prev[9] !== last_O3_real_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[9] = O3_real_expected_prev[9];
	end
	if (
		( O3_real_expected_prev[10] !== 1'bx ) && ( O3_real_prev[10] !== O3_real_expected_prev[10] )
		&& ((O3_real_expected_prev[10] !== last_O3_real_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[10] = O3_real_expected_prev[10];
	end
	if (
		( O3_real_expected_prev[11] !== 1'bx ) && ( O3_real_prev[11] !== O3_real_expected_prev[11] )
		&& ((O3_real_expected_prev[11] !== last_O3_real_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[11] = O3_real_expected_prev[11];
	end
	if (
		( O3_real_expected_prev[12] !== 1'bx ) && ( O3_real_prev[12] !== O3_real_expected_prev[12] )
		&& ((O3_real_expected_prev[12] !== last_O3_real_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[12] = O3_real_expected_prev[12];
	end
	if (
		( O3_real_expected_prev[13] !== 1'bx ) && ( O3_real_prev[13] !== O3_real_expected_prev[13] )
		&& ((O3_real_expected_prev[13] !== last_O3_real_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[13] = O3_real_expected_prev[13];
	end
	if (
		( O3_real_expected_prev[14] !== 1'bx ) && ( O3_real_prev[14] !== O3_real_expected_prev[14] )
		&& ((O3_real_expected_prev[14] !== last_O3_real_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[14] = O3_real_expected_prev[14];
	end
	if (
		( O3_real_expected_prev[15] !== 1'bx ) && ( O3_real_prev[15] !== O3_real_expected_prev[15] )
		&& ((O3_real_expected_prev[15] !== last_O3_real_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O3_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O3_real_expected_prev);
		$display ("     Real value = %b", O3_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_O3_real_exp[15] = O3_real_expected_prev[15];
	end
	if (
		( O4_imag_expected_prev[0] !== 1'bx ) && ( O4_imag_prev[0] !== O4_imag_expected_prev[0] )
		&& ((O4_imag_expected_prev[0] !== last_O4_imag_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[0] = O4_imag_expected_prev[0];
	end
	if (
		( O4_imag_expected_prev[1] !== 1'bx ) && ( O4_imag_prev[1] !== O4_imag_expected_prev[1] )
		&& ((O4_imag_expected_prev[1] !== last_O4_imag_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[1] = O4_imag_expected_prev[1];
	end
	if (
		( O4_imag_expected_prev[2] !== 1'bx ) && ( O4_imag_prev[2] !== O4_imag_expected_prev[2] )
		&& ((O4_imag_expected_prev[2] !== last_O4_imag_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[2] = O4_imag_expected_prev[2];
	end
	if (
		( O4_imag_expected_prev[3] !== 1'bx ) && ( O4_imag_prev[3] !== O4_imag_expected_prev[3] )
		&& ((O4_imag_expected_prev[3] !== last_O4_imag_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[3] = O4_imag_expected_prev[3];
	end
	if (
		( O4_imag_expected_prev[4] !== 1'bx ) && ( O4_imag_prev[4] !== O4_imag_expected_prev[4] )
		&& ((O4_imag_expected_prev[4] !== last_O4_imag_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[4] = O4_imag_expected_prev[4];
	end
	if (
		( O4_imag_expected_prev[5] !== 1'bx ) && ( O4_imag_prev[5] !== O4_imag_expected_prev[5] )
		&& ((O4_imag_expected_prev[5] !== last_O4_imag_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[5] = O4_imag_expected_prev[5];
	end
	if (
		( O4_imag_expected_prev[6] !== 1'bx ) && ( O4_imag_prev[6] !== O4_imag_expected_prev[6] )
		&& ((O4_imag_expected_prev[6] !== last_O4_imag_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[6] = O4_imag_expected_prev[6];
	end
	if (
		( O4_imag_expected_prev[7] !== 1'bx ) && ( O4_imag_prev[7] !== O4_imag_expected_prev[7] )
		&& ((O4_imag_expected_prev[7] !== last_O4_imag_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[7] = O4_imag_expected_prev[7];
	end
	if (
		( O4_imag_expected_prev[8] !== 1'bx ) && ( O4_imag_prev[8] !== O4_imag_expected_prev[8] )
		&& ((O4_imag_expected_prev[8] !== last_O4_imag_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[8] = O4_imag_expected_prev[8];
	end
	if (
		( O4_imag_expected_prev[9] !== 1'bx ) && ( O4_imag_prev[9] !== O4_imag_expected_prev[9] )
		&& ((O4_imag_expected_prev[9] !== last_O4_imag_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[9] = O4_imag_expected_prev[9];
	end
	if (
		( O4_imag_expected_prev[10] !== 1'bx ) && ( O4_imag_prev[10] !== O4_imag_expected_prev[10] )
		&& ((O4_imag_expected_prev[10] !== last_O4_imag_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[10] = O4_imag_expected_prev[10];
	end
	if (
		( O4_imag_expected_prev[11] !== 1'bx ) && ( O4_imag_prev[11] !== O4_imag_expected_prev[11] )
		&& ((O4_imag_expected_prev[11] !== last_O4_imag_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[11] = O4_imag_expected_prev[11];
	end
	if (
		( O4_imag_expected_prev[12] !== 1'bx ) && ( O4_imag_prev[12] !== O4_imag_expected_prev[12] )
		&& ((O4_imag_expected_prev[12] !== last_O4_imag_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[12] = O4_imag_expected_prev[12];
	end
	if (
		( O4_imag_expected_prev[13] !== 1'bx ) && ( O4_imag_prev[13] !== O4_imag_expected_prev[13] )
		&& ((O4_imag_expected_prev[13] !== last_O4_imag_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[13] = O4_imag_expected_prev[13];
	end
	if (
		( O4_imag_expected_prev[14] !== 1'bx ) && ( O4_imag_prev[14] !== O4_imag_expected_prev[14] )
		&& ((O4_imag_expected_prev[14] !== last_O4_imag_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[14] = O4_imag_expected_prev[14];
	end
	if (
		( O4_imag_expected_prev[15] !== 1'bx ) && ( O4_imag_prev[15] !== O4_imag_expected_prev[15] )
		&& ((O4_imag_expected_prev[15] !== last_O4_imag_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_imag_expected_prev);
		$display ("     Real value = %b", O4_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_O4_imag_exp[15] = O4_imag_expected_prev[15];
	end
	if (
		( O4_real_expected_prev[0] !== 1'bx ) && ( O4_real_prev[0] !== O4_real_expected_prev[0] )
		&& ((O4_real_expected_prev[0] !== last_O4_real_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[0] = O4_real_expected_prev[0];
	end
	if (
		( O4_real_expected_prev[1] !== 1'bx ) && ( O4_real_prev[1] !== O4_real_expected_prev[1] )
		&& ((O4_real_expected_prev[1] !== last_O4_real_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[1] = O4_real_expected_prev[1];
	end
	if (
		( O4_real_expected_prev[2] !== 1'bx ) && ( O4_real_prev[2] !== O4_real_expected_prev[2] )
		&& ((O4_real_expected_prev[2] !== last_O4_real_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[2] = O4_real_expected_prev[2];
	end
	if (
		( O4_real_expected_prev[3] !== 1'bx ) && ( O4_real_prev[3] !== O4_real_expected_prev[3] )
		&& ((O4_real_expected_prev[3] !== last_O4_real_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[3] = O4_real_expected_prev[3];
	end
	if (
		( O4_real_expected_prev[4] !== 1'bx ) && ( O4_real_prev[4] !== O4_real_expected_prev[4] )
		&& ((O4_real_expected_prev[4] !== last_O4_real_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[4] = O4_real_expected_prev[4];
	end
	if (
		( O4_real_expected_prev[5] !== 1'bx ) && ( O4_real_prev[5] !== O4_real_expected_prev[5] )
		&& ((O4_real_expected_prev[5] !== last_O4_real_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[5] = O4_real_expected_prev[5];
	end
	if (
		( O4_real_expected_prev[6] !== 1'bx ) && ( O4_real_prev[6] !== O4_real_expected_prev[6] )
		&& ((O4_real_expected_prev[6] !== last_O4_real_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[6] = O4_real_expected_prev[6];
	end
	if (
		( O4_real_expected_prev[7] !== 1'bx ) && ( O4_real_prev[7] !== O4_real_expected_prev[7] )
		&& ((O4_real_expected_prev[7] !== last_O4_real_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[7] = O4_real_expected_prev[7];
	end
	if (
		( O4_real_expected_prev[8] !== 1'bx ) && ( O4_real_prev[8] !== O4_real_expected_prev[8] )
		&& ((O4_real_expected_prev[8] !== last_O4_real_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[8] = O4_real_expected_prev[8];
	end
	if (
		( O4_real_expected_prev[9] !== 1'bx ) && ( O4_real_prev[9] !== O4_real_expected_prev[9] )
		&& ((O4_real_expected_prev[9] !== last_O4_real_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[9] = O4_real_expected_prev[9];
	end
	if (
		( O4_real_expected_prev[10] !== 1'bx ) && ( O4_real_prev[10] !== O4_real_expected_prev[10] )
		&& ((O4_real_expected_prev[10] !== last_O4_real_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[10] = O4_real_expected_prev[10];
	end
	if (
		( O4_real_expected_prev[11] !== 1'bx ) && ( O4_real_prev[11] !== O4_real_expected_prev[11] )
		&& ((O4_real_expected_prev[11] !== last_O4_real_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[11] = O4_real_expected_prev[11];
	end
	if (
		( O4_real_expected_prev[12] !== 1'bx ) && ( O4_real_prev[12] !== O4_real_expected_prev[12] )
		&& ((O4_real_expected_prev[12] !== last_O4_real_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[12] = O4_real_expected_prev[12];
	end
	if (
		( O4_real_expected_prev[13] !== 1'bx ) && ( O4_real_prev[13] !== O4_real_expected_prev[13] )
		&& ((O4_real_expected_prev[13] !== last_O4_real_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[13] = O4_real_expected_prev[13];
	end
	if (
		( O4_real_expected_prev[14] !== 1'bx ) && ( O4_real_prev[14] !== O4_real_expected_prev[14] )
		&& ((O4_real_expected_prev[14] !== last_O4_real_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[14] = O4_real_expected_prev[14];
	end
	if (
		( O4_real_expected_prev[15] !== 1'bx ) && ( O4_real_prev[15] !== O4_real_expected_prev[15] )
		&& ((O4_real_expected_prev[15] !== last_O4_real_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O4_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O4_real_expected_prev);
		$display ("     Real value = %b", O4_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_O4_real_exp[15] = O4_real_expected_prev[15];
	end
	if (
		( O5_imag_expected_prev[0] !== 1'bx ) && ( O5_imag_prev[0] !== O5_imag_expected_prev[0] )
		&& ((O5_imag_expected_prev[0] !== last_O5_imag_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[0] = O5_imag_expected_prev[0];
	end
	if (
		( O5_imag_expected_prev[1] !== 1'bx ) && ( O5_imag_prev[1] !== O5_imag_expected_prev[1] )
		&& ((O5_imag_expected_prev[1] !== last_O5_imag_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[1] = O5_imag_expected_prev[1];
	end
	if (
		( O5_imag_expected_prev[2] !== 1'bx ) && ( O5_imag_prev[2] !== O5_imag_expected_prev[2] )
		&& ((O5_imag_expected_prev[2] !== last_O5_imag_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[2] = O5_imag_expected_prev[2];
	end
	if (
		( O5_imag_expected_prev[3] !== 1'bx ) && ( O5_imag_prev[3] !== O5_imag_expected_prev[3] )
		&& ((O5_imag_expected_prev[3] !== last_O5_imag_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[3] = O5_imag_expected_prev[3];
	end
	if (
		( O5_imag_expected_prev[4] !== 1'bx ) && ( O5_imag_prev[4] !== O5_imag_expected_prev[4] )
		&& ((O5_imag_expected_prev[4] !== last_O5_imag_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[4] = O5_imag_expected_prev[4];
	end
	if (
		( O5_imag_expected_prev[5] !== 1'bx ) && ( O5_imag_prev[5] !== O5_imag_expected_prev[5] )
		&& ((O5_imag_expected_prev[5] !== last_O5_imag_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[5] = O5_imag_expected_prev[5];
	end
	if (
		( O5_imag_expected_prev[6] !== 1'bx ) && ( O5_imag_prev[6] !== O5_imag_expected_prev[6] )
		&& ((O5_imag_expected_prev[6] !== last_O5_imag_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[6] = O5_imag_expected_prev[6];
	end
	if (
		( O5_imag_expected_prev[7] !== 1'bx ) && ( O5_imag_prev[7] !== O5_imag_expected_prev[7] )
		&& ((O5_imag_expected_prev[7] !== last_O5_imag_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[7] = O5_imag_expected_prev[7];
	end
	if (
		( O5_imag_expected_prev[8] !== 1'bx ) && ( O5_imag_prev[8] !== O5_imag_expected_prev[8] )
		&& ((O5_imag_expected_prev[8] !== last_O5_imag_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[8] = O5_imag_expected_prev[8];
	end
	if (
		( O5_imag_expected_prev[9] !== 1'bx ) && ( O5_imag_prev[9] !== O5_imag_expected_prev[9] )
		&& ((O5_imag_expected_prev[9] !== last_O5_imag_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[9] = O5_imag_expected_prev[9];
	end
	if (
		( O5_imag_expected_prev[10] !== 1'bx ) && ( O5_imag_prev[10] !== O5_imag_expected_prev[10] )
		&& ((O5_imag_expected_prev[10] !== last_O5_imag_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[10] = O5_imag_expected_prev[10];
	end
	if (
		( O5_imag_expected_prev[11] !== 1'bx ) && ( O5_imag_prev[11] !== O5_imag_expected_prev[11] )
		&& ((O5_imag_expected_prev[11] !== last_O5_imag_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[11] = O5_imag_expected_prev[11];
	end
	if (
		( O5_imag_expected_prev[12] !== 1'bx ) && ( O5_imag_prev[12] !== O5_imag_expected_prev[12] )
		&& ((O5_imag_expected_prev[12] !== last_O5_imag_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[12] = O5_imag_expected_prev[12];
	end
	if (
		( O5_imag_expected_prev[13] !== 1'bx ) && ( O5_imag_prev[13] !== O5_imag_expected_prev[13] )
		&& ((O5_imag_expected_prev[13] !== last_O5_imag_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[13] = O5_imag_expected_prev[13];
	end
	if (
		( O5_imag_expected_prev[14] !== 1'bx ) && ( O5_imag_prev[14] !== O5_imag_expected_prev[14] )
		&& ((O5_imag_expected_prev[14] !== last_O5_imag_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[14] = O5_imag_expected_prev[14];
	end
	if (
		( O5_imag_expected_prev[15] !== 1'bx ) && ( O5_imag_prev[15] !== O5_imag_expected_prev[15] )
		&& ((O5_imag_expected_prev[15] !== last_O5_imag_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_imag_expected_prev);
		$display ("     Real value = %b", O5_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_O5_imag_exp[15] = O5_imag_expected_prev[15];
	end
	if (
		( O5_real_expected_prev[0] !== 1'bx ) && ( O5_real_prev[0] !== O5_real_expected_prev[0] )
		&& ((O5_real_expected_prev[0] !== last_O5_real_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[0] = O5_real_expected_prev[0];
	end
	if (
		( O5_real_expected_prev[1] !== 1'bx ) && ( O5_real_prev[1] !== O5_real_expected_prev[1] )
		&& ((O5_real_expected_prev[1] !== last_O5_real_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[1] = O5_real_expected_prev[1];
	end
	if (
		( O5_real_expected_prev[2] !== 1'bx ) && ( O5_real_prev[2] !== O5_real_expected_prev[2] )
		&& ((O5_real_expected_prev[2] !== last_O5_real_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[2] = O5_real_expected_prev[2];
	end
	if (
		( O5_real_expected_prev[3] !== 1'bx ) && ( O5_real_prev[3] !== O5_real_expected_prev[3] )
		&& ((O5_real_expected_prev[3] !== last_O5_real_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[3] = O5_real_expected_prev[3];
	end
	if (
		( O5_real_expected_prev[4] !== 1'bx ) && ( O5_real_prev[4] !== O5_real_expected_prev[4] )
		&& ((O5_real_expected_prev[4] !== last_O5_real_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[4] = O5_real_expected_prev[4];
	end
	if (
		( O5_real_expected_prev[5] !== 1'bx ) && ( O5_real_prev[5] !== O5_real_expected_prev[5] )
		&& ((O5_real_expected_prev[5] !== last_O5_real_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[5] = O5_real_expected_prev[5];
	end
	if (
		( O5_real_expected_prev[6] !== 1'bx ) && ( O5_real_prev[6] !== O5_real_expected_prev[6] )
		&& ((O5_real_expected_prev[6] !== last_O5_real_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[6] = O5_real_expected_prev[6];
	end
	if (
		( O5_real_expected_prev[7] !== 1'bx ) && ( O5_real_prev[7] !== O5_real_expected_prev[7] )
		&& ((O5_real_expected_prev[7] !== last_O5_real_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[7] = O5_real_expected_prev[7];
	end
	if (
		( O5_real_expected_prev[8] !== 1'bx ) && ( O5_real_prev[8] !== O5_real_expected_prev[8] )
		&& ((O5_real_expected_prev[8] !== last_O5_real_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[8] = O5_real_expected_prev[8];
	end
	if (
		( O5_real_expected_prev[9] !== 1'bx ) && ( O5_real_prev[9] !== O5_real_expected_prev[9] )
		&& ((O5_real_expected_prev[9] !== last_O5_real_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[9] = O5_real_expected_prev[9];
	end
	if (
		( O5_real_expected_prev[10] !== 1'bx ) && ( O5_real_prev[10] !== O5_real_expected_prev[10] )
		&& ((O5_real_expected_prev[10] !== last_O5_real_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[10] = O5_real_expected_prev[10];
	end
	if (
		( O5_real_expected_prev[11] !== 1'bx ) && ( O5_real_prev[11] !== O5_real_expected_prev[11] )
		&& ((O5_real_expected_prev[11] !== last_O5_real_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[11] = O5_real_expected_prev[11];
	end
	if (
		( O5_real_expected_prev[12] !== 1'bx ) && ( O5_real_prev[12] !== O5_real_expected_prev[12] )
		&& ((O5_real_expected_prev[12] !== last_O5_real_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[12] = O5_real_expected_prev[12];
	end
	if (
		( O5_real_expected_prev[13] !== 1'bx ) && ( O5_real_prev[13] !== O5_real_expected_prev[13] )
		&& ((O5_real_expected_prev[13] !== last_O5_real_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[13] = O5_real_expected_prev[13];
	end
	if (
		( O5_real_expected_prev[14] !== 1'bx ) && ( O5_real_prev[14] !== O5_real_expected_prev[14] )
		&& ((O5_real_expected_prev[14] !== last_O5_real_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[14] = O5_real_expected_prev[14];
	end
	if (
		( O5_real_expected_prev[15] !== 1'bx ) && ( O5_real_prev[15] !== O5_real_expected_prev[15] )
		&& ((O5_real_expected_prev[15] !== last_O5_real_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O5_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O5_real_expected_prev);
		$display ("     Real value = %b", O5_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_O5_real_exp[15] = O5_real_expected_prev[15];
	end
	if (
		( O6_imag_expected_prev[0] !== 1'bx ) && ( O6_imag_prev[0] !== O6_imag_expected_prev[0] )
		&& ((O6_imag_expected_prev[0] !== last_O6_imag_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[0] = O6_imag_expected_prev[0];
	end
	if (
		( O6_imag_expected_prev[1] !== 1'bx ) && ( O6_imag_prev[1] !== O6_imag_expected_prev[1] )
		&& ((O6_imag_expected_prev[1] !== last_O6_imag_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[1] = O6_imag_expected_prev[1];
	end
	if (
		( O6_imag_expected_prev[2] !== 1'bx ) && ( O6_imag_prev[2] !== O6_imag_expected_prev[2] )
		&& ((O6_imag_expected_prev[2] !== last_O6_imag_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[2] = O6_imag_expected_prev[2];
	end
	if (
		( O6_imag_expected_prev[3] !== 1'bx ) && ( O6_imag_prev[3] !== O6_imag_expected_prev[3] )
		&& ((O6_imag_expected_prev[3] !== last_O6_imag_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[3] = O6_imag_expected_prev[3];
	end
	if (
		( O6_imag_expected_prev[4] !== 1'bx ) && ( O6_imag_prev[4] !== O6_imag_expected_prev[4] )
		&& ((O6_imag_expected_prev[4] !== last_O6_imag_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[4] = O6_imag_expected_prev[4];
	end
	if (
		( O6_imag_expected_prev[5] !== 1'bx ) && ( O6_imag_prev[5] !== O6_imag_expected_prev[5] )
		&& ((O6_imag_expected_prev[5] !== last_O6_imag_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[5] = O6_imag_expected_prev[5];
	end
	if (
		( O6_imag_expected_prev[6] !== 1'bx ) && ( O6_imag_prev[6] !== O6_imag_expected_prev[6] )
		&& ((O6_imag_expected_prev[6] !== last_O6_imag_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[6] = O6_imag_expected_prev[6];
	end
	if (
		( O6_imag_expected_prev[7] !== 1'bx ) && ( O6_imag_prev[7] !== O6_imag_expected_prev[7] )
		&& ((O6_imag_expected_prev[7] !== last_O6_imag_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[7] = O6_imag_expected_prev[7];
	end
	if (
		( O6_imag_expected_prev[8] !== 1'bx ) && ( O6_imag_prev[8] !== O6_imag_expected_prev[8] )
		&& ((O6_imag_expected_prev[8] !== last_O6_imag_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[8] = O6_imag_expected_prev[8];
	end
	if (
		( O6_imag_expected_prev[9] !== 1'bx ) && ( O6_imag_prev[9] !== O6_imag_expected_prev[9] )
		&& ((O6_imag_expected_prev[9] !== last_O6_imag_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[9] = O6_imag_expected_prev[9];
	end
	if (
		( O6_imag_expected_prev[10] !== 1'bx ) && ( O6_imag_prev[10] !== O6_imag_expected_prev[10] )
		&& ((O6_imag_expected_prev[10] !== last_O6_imag_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[10] = O6_imag_expected_prev[10];
	end
	if (
		( O6_imag_expected_prev[11] !== 1'bx ) && ( O6_imag_prev[11] !== O6_imag_expected_prev[11] )
		&& ((O6_imag_expected_prev[11] !== last_O6_imag_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[11] = O6_imag_expected_prev[11];
	end
	if (
		( O6_imag_expected_prev[12] !== 1'bx ) && ( O6_imag_prev[12] !== O6_imag_expected_prev[12] )
		&& ((O6_imag_expected_prev[12] !== last_O6_imag_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[12] = O6_imag_expected_prev[12];
	end
	if (
		( O6_imag_expected_prev[13] !== 1'bx ) && ( O6_imag_prev[13] !== O6_imag_expected_prev[13] )
		&& ((O6_imag_expected_prev[13] !== last_O6_imag_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[13] = O6_imag_expected_prev[13];
	end
	if (
		( O6_imag_expected_prev[14] !== 1'bx ) && ( O6_imag_prev[14] !== O6_imag_expected_prev[14] )
		&& ((O6_imag_expected_prev[14] !== last_O6_imag_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[14] = O6_imag_expected_prev[14];
	end
	if (
		( O6_imag_expected_prev[15] !== 1'bx ) && ( O6_imag_prev[15] !== O6_imag_expected_prev[15] )
		&& ((O6_imag_expected_prev[15] !== last_O6_imag_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_imag_expected_prev);
		$display ("     Real value = %b", O6_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_O6_imag_exp[15] = O6_imag_expected_prev[15];
	end
	if (
		( O6_real_expected_prev[0] !== 1'bx ) && ( O6_real_prev[0] !== O6_real_expected_prev[0] )
		&& ((O6_real_expected_prev[0] !== last_O6_real_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[0] = O6_real_expected_prev[0];
	end
	if (
		( O6_real_expected_prev[1] !== 1'bx ) && ( O6_real_prev[1] !== O6_real_expected_prev[1] )
		&& ((O6_real_expected_prev[1] !== last_O6_real_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[1] = O6_real_expected_prev[1];
	end
	if (
		( O6_real_expected_prev[2] !== 1'bx ) && ( O6_real_prev[2] !== O6_real_expected_prev[2] )
		&& ((O6_real_expected_prev[2] !== last_O6_real_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[2] = O6_real_expected_prev[2];
	end
	if (
		( O6_real_expected_prev[3] !== 1'bx ) && ( O6_real_prev[3] !== O6_real_expected_prev[3] )
		&& ((O6_real_expected_prev[3] !== last_O6_real_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[3] = O6_real_expected_prev[3];
	end
	if (
		( O6_real_expected_prev[4] !== 1'bx ) && ( O6_real_prev[4] !== O6_real_expected_prev[4] )
		&& ((O6_real_expected_prev[4] !== last_O6_real_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[4] = O6_real_expected_prev[4];
	end
	if (
		( O6_real_expected_prev[5] !== 1'bx ) && ( O6_real_prev[5] !== O6_real_expected_prev[5] )
		&& ((O6_real_expected_prev[5] !== last_O6_real_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[5] = O6_real_expected_prev[5];
	end
	if (
		( O6_real_expected_prev[6] !== 1'bx ) && ( O6_real_prev[6] !== O6_real_expected_prev[6] )
		&& ((O6_real_expected_prev[6] !== last_O6_real_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[6] = O6_real_expected_prev[6];
	end
	if (
		( O6_real_expected_prev[7] !== 1'bx ) && ( O6_real_prev[7] !== O6_real_expected_prev[7] )
		&& ((O6_real_expected_prev[7] !== last_O6_real_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[7] = O6_real_expected_prev[7];
	end
	if (
		( O6_real_expected_prev[8] !== 1'bx ) && ( O6_real_prev[8] !== O6_real_expected_prev[8] )
		&& ((O6_real_expected_prev[8] !== last_O6_real_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[8] = O6_real_expected_prev[8];
	end
	if (
		( O6_real_expected_prev[9] !== 1'bx ) && ( O6_real_prev[9] !== O6_real_expected_prev[9] )
		&& ((O6_real_expected_prev[9] !== last_O6_real_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[9] = O6_real_expected_prev[9];
	end
	if (
		( O6_real_expected_prev[10] !== 1'bx ) && ( O6_real_prev[10] !== O6_real_expected_prev[10] )
		&& ((O6_real_expected_prev[10] !== last_O6_real_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[10] = O6_real_expected_prev[10];
	end
	if (
		( O6_real_expected_prev[11] !== 1'bx ) && ( O6_real_prev[11] !== O6_real_expected_prev[11] )
		&& ((O6_real_expected_prev[11] !== last_O6_real_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[11] = O6_real_expected_prev[11];
	end
	if (
		( O6_real_expected_prev[12] !== 1'bx ) && ( O6_real_prev[12] !== O6_real_expected_prev[12] )
		&& ((O6_real_expected_prev[12] !== last_O6_real_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[12] = O6_real_expected_prev[12];
	end
	if (
		( O6_real_expected_prev[13] !== 1'bx ) && ( O6_real_prev[13] !== O6_real_expected_prev[13] )
		&& ((O6_real_expected_prev[13] !== last_O6_real_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[13] = O6_real_expected_prev[13];
	end
	if (
		( O6_real_expected_prev[14] !== 1'bx ) && ( O6_real_prev[14] !== O6_real_expected_prev[14] )
		&& ((O6_real_expected_prev[14] !== last_O6_real_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[14] = O6_real_expected_prev[14];
	end
	if (
		( O6_real_expected_prev[15] !== 1'bx ) && ( O6_real_prev[15] !== O6_real_expected_prev[15] )
		&& ((O6_real_expected_prev[15] !== last_O6_real_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O6_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O6_real_expected_prev);
		$display ("     Real value = %b", O6_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_O6_real_exp[15] = O6_real_expected_prev[15];
	end
	if (
		( O7_imag_expected_prev[0] !== 1'bx ) && ( O7_imag_prev[0] !== O7_imag_expected_prev[0] )
		&& ((O7_imag_expected_prev[0] !== last_O7_imag_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[0] = O7_imag_expected_prev[0];
	end
	if (
		( O7_imag_expected_prev[1] !== 1'bx ) && ( O7_imag_prev[1] !== O7_imag_expected_prev[1] )
		&& ((O7_imag_expected_prev[1] !== last_O7_imag_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[1] = O7_imag_expected_prev[1];
	end
	if (
		( O7_imag_expected_prev[2] !== 1'bx ) && ( O7_imag_prev[2] !== O7_imag_expected_prev[2] )
		&& ((O7_imag_expected_prev[2] !== last_O7_imag_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[2] = O7_imag_expected_prev[2];
	end
	if (
		( O7_imag_expected_prev[3] !== 1'bx ) && ( O7_imag_prev[3] !== O7_imag_expected_prev[3] )
		&& ((O7_imag_expected_prev[3] !== last_O7_imag_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[3] = O7_imag_expected_prev[3];
	end
	if (
		( O7_imag_expected_prev[4] !== 1'bx ) && ( O7_imag_prev[4] !== O7_imag_expected_prev[4] )
		&& ((O7_imag_expected_prev[4] !== last_O7_imag_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[4] = O7_imag_expected_prev[4];
	end
	if (
		( O7_imag_expected_prev[5] !== 1'bx ) && ( O7_imag_prev[5] !== O7_imag_expected_prev[5] )
		&& ((O7_imag_expected_prev[5] !== last_O7_imag_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[5] = O7_imag_expected_prev[5];
	end
	if (
		( O7_imag_expected_prev[6] !== 1'bx ) && ( O7_imag_prev[6] !== O7_imag_expected_prev[6] )
		&& ((O7_imag_expected_prev[6] !== last_O7_imag_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[6] = O7_imag_expected_prev[6];
	end
	if (
		( O7_imag_expected_prev[7] !== 1'bx ) && ( O7_imag_prev[7] !== O7_imag_expected_prev[7] )
		&& ((O7_imag_expected_prev[7] !== last_O7_imag_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[7] = O7_imag_expected_prev[7];
	end
	if (
		( O7_imag_expected_prev[8] !== 1'bx ) && ( O7_imag_prev[8] !== O7_imag_expected_prev[8] )
		&& ((O7_imag_expected_prev[8] !== last_O7_imag_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[8] = O7_imag_expected_prev[8];
	end
	if (
		( O7_imag_expected_prev[9] !== 1'bx ) && ( O7_imag_prev[9] !== O7_imag_expected_prev[9] )
		&& ((O7_imag_expected_prev[9] !== last_O7_imag_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[9] = O7_imag_expected_prev[9];
	end
	if (
		( O7_imag_expected_prev[10] !== 1'bx ) && ( O7_imag_prev[10] !== O7_imag_expected_prev[10] )
		&& ((O7_imag_expected_prev[10] !== last_O7_imag_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[10] = O7_imag_expected_prev[10];
	end
	if (
		( O7_imag_expected_prev[11] !== 1'bx ) && ( O7_imag_prev[11] !== O7_imag_expected_prev[11] )
		&& ((O7_imag_expected_prev[11] !== last_O7_imag_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[11] = O7_imag_expected_prev[11];
	end
	if (
		( O7_imag_expected_prev[12] !== 1'bx ) && ( O7_imag_prev[12] !== O7_imag_expected_prev[12] )
		&& ((O7_imag_expected_prev[12] !== last_O7_imag_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[12] = O7_imag_expected_prev[12];
	end
	if (
		( O7_imag_expected_prev[13] !== 1'bx ) && ( O7_imag_prev[13] !== O7_imag_expected_prev[13] )
		&& ((O7_imag_expected_prev[13] !== last_O7_imag_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[13] = O7_imag_expected_prev[13];
	end
	if (
		( O7_imag_expected_prev[14] !== 1'bx ) && ( O7_imag_prev[14] !== O7_imag_expected_prev[14] )
		&& ((O7_imag_expected_prev[14] !== last_O7_imag_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[14] = O7_imag_expected_prev[14];
	end
	if (
		( O7_imag_expected_prev[15] !== 1'bx ) && ( O7_imag_prev[15] !== O7_imag_expected_prev[15] )
		&& ((O7_imag_expected_prev[15] !== last_O7_imag_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_imag[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_imag_expected_prev);
		$display ("     Real value = %b", O7_imag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_O7_imag_exp[15] = O7_imag_expected_prev[15];
	end
	if (
		( O7_real_expected_prev[0] !== 1'bx ) && ( O7_real_prev[0] !== O7_real_expected_prev[0] )
		&& ((O7_real_expected_prev[0] !== last_O7_real_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[0] = O7_real_expected_prev[0];
	end
	if (
		( O7_real_expected_prev[1] !== 1'bx ) && ( O7_real_prev[1] !== O7_real_expected_prev[1] )
		&& ((O7_real_expected_prev[1] !== last_O7_real_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[1] = O7_real_expected_prev[1];
	end
	if (
		( O7_real_expected_prev[2] !== 1'bx ) && ( O7_real_prev[2] !== O7_real_expected_prev[2] )
		&& ((O7_real_expected_prev[2] !== last_O7_real_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[2] = O7_real_expected_prev[2];
	end
	if (
		( O7_real_expected_prev[3] !== 1'bx ) && ( O7_real_prev[3] !== O7_real_expected_prev[3] )
		&& ((O7_real_expected_prev[3] !== last_O7_real_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[3] = O7_real_expected_prev[3];
	end
	if (
		( O7_real_expected_prev[4] !== 1'bx ) && ( O7_real_prev[4] !== O7_real_expected_prev[4] )
		&& ((O7_real_expected_prev[4] !== last_O7_real_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[4] = O7_real_expected_prev[4];
	end
	if (
		( O7_real_expected_prev[5] !== 1'bx ) && ( O7_real_prev[5] !== O7_real_expected_prev[5] )
		&& ((O7_real_expected_prev[5] !== last_O7_real_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[5] = O7_real_expected_prev[5];
	end
	if (
		( O7_real_expected_prev[6] !== 1'bx ) && ( O7_real_prev[6] !== O7_real_expected_prev[6] )
		&& ((O7_real_expected_prev[6] !== last_O7_real_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[6] = O7_real_expected_prev[6];
	end
	if (
		( O7_real_expected_prev[7] !== 1'bx ) && ( O7_real_prev[7] !== O7_real_expected_prev[7] )
		&& ((O7_real_expected_prev[7] !== last_O7_real_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[7] = O7_real_expected_prev[7];
	end
	if (
		( O7_real_expected_prev[8] !== 1'bx ) && ( O7_real_prev[8] !== O7_real_expected_prev[8] )
		&& ((O7_real_expected_prev[8] !== last_O7_real_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[8] = O7_real_expected_prev[8];
	end
	if (
		( O7_real_expected_prev[9] !== 1'bx ) && ( O7_real_prev[9] !== O7_real_expected_prev[9] )
		&& ((O7_real_expected_prev[9] !== last_O7_real_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[9] = O7_real_expected_prev[9];
	end
	if (
		( O7_real_expected_prev[10] !== 1'bx ) && ( O7_real_prev[10] !== O7_real_expected_prev[10] )
		&& ((O7_real_expected_prev[10] !== last_O7_real_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[10] = O7_real_expected_prev[10];
	end
	if (
		( O7_real_expected_prev[11] !== 1'bx ) && ( O7_real_prev[11] !== O7_real_expected_prev[11] )
		&& ((O7_real_expected_prev[11] !== last_O7_real_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[11] = O7_real_expected_prev[11];
	end
	if (
		( O7_real_expected_prev[12] !== 1'bx ) && ( O7_real_prev[12] !== O7_real_expected_prev[12] )
		&& ((O7_real_expected_prev[12] !== last_O7_real_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[12] = O7_real_expected_prev[12];
	end
	if (
		( O7_real_expected_prev[13] !== 1'bx ) && ( O7_real_prev[13] !== O7_real_expected_prev[13] )
		&& ((O7_real_expected_prev[13] !== last_O7_real_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[13] = O7_real_expected_prev[13];
	end
	if (
		( O7_real_expected_prev[14] !== 1'bx ) && ( O7_real_prev[14] !== O7_real_expected_prev[14] )
		&& ((O7_real_expected_prev[14] !== last_O7_real_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[14] = O7_real_expected_prev[14];
	end
	if (
		( O7_real_expected_prev[15] !== 1'bx ) && ( O7_real_prev[15] !== O7_real_expected_prev[15] )
		&& ((O7_real_expected_prev[15] !== last_O7_real_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O7_real[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O7_real_expected_prev);
		$display ("     Real value = %b", O7_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_O7_real_exp[15] = O7_real_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fft_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg [15:0] I0_imag;
reg [15:0] I0_real;
reg [15:0] I1_imag;
reg [15:0] I1_real;
reg [15:0] I2_imag;
reg [15:0] I2_real;
reg [15:0] I3_imag;
reg [15:0] I3_real;
reg [15:0] I4_imag;
reg [15:0] I4_real;
reg [15:0] I5_imag;
reg [15:0] I5_real;
reg [15:0] I6_imag;
reg [15:0] I6_real;
reg [15:0] I7_imag;
reg [15:0] I7_real;
reg INV;
reg RESET;
// wires                                               
wire [15:0] O0_imag;
wire [15:0] O0_real;
wire [15:0] O1_imag;
wire [15:0] O1_real;
wire [15:0] O2_imag;
wire [15:0] O2_real;
wire [15:0] O3_imag;
wire [15:0] O3_real;
wire [15:0] O4_imag;
wire [15:0] O4_real;
wire [15:0] O5_imag;
wire [15:0] O5_real;
wire [15:0] O6_imag;
wire [15:0] O6_real;
wire [15:0] O7_imag;
wire [15:0] O7_real;

wire sampler;                             

// assign statements (if any)                          
fft i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.EN(EN),
	.I0_imag(I0_imag),
	.I0_real(I0_real),
	.I1_imag(I1_imag),
	.I1_real(I1_real),
	.I2_imag(I2_imag),
	.I2_real(I2_real),
	.I3_imag(I3_imag),
	.I3_real(I3_real),
	.I4_imag(I4_imag),
	.I4_real(I4_real),
	.I5_imag(I5_imag),
	.I5_real(I5_real),
	.I6_imag(I6_imag),
	.I6_real(I6_real),
	.I7_imag(I7_imag),
	.I7_real(I7_real),
	.INV(INV),
	.O0_imag(O0_imag),
	.O0_real(O0_real),
	.O1_imag(O1_imag),
	.O1_real(O1_real),
	.O2_imag(O2_imag),
	.O2_real(O2_real),
	.O3_imag(O3_imag),
	.O3_real(O3_real),
	.O4_imag(O4_imag),
	.O4_real(O4_real),
	.O5_imag(O5_imag),
	.O5_real(O5_real),
	.O6_imag(O6_imag),
	.O6_real(O6_real),
	.O7_imag(O7_imag),
	.O7_real(O7_real),
	.RESET(RESET)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// EN
initial
begin
	EN = 1'b1;
end 
// I0_imag[ 15 ]
initial
begin
	I0_imag[15] = 1'b0;
end 
// I0_imag[ 14 ]
initial
begin
	I0_imag[14] = 1'b0;
end 
// I0_imag[ 13 ]
initial
begin
	I0_imag[13] = 1'b0;
end 
// I0_imag[ 12 ]
initial
begin
	I0_imag[12] = 1'b0;
end 
// I0_imag[ 11 ]
initial
begin
	I0_imag[11] = 1'b1;
end 
// I0_imag[ 10 ]
initial
begin
	I0_imag[10] = 1'b0;
end 
// I0_imag[ 9 ]
initial
begin
	I0_imag[9] = 1'b0;
end 
// I0_imag[ 8 ]
initial
begin
	I0_imag[8] = 1'b1;
end 
// I0_imag[ 7 ]
initial
begin
	I0_imag[7] = 1'b1;
end 
// I0_imag[ 6 ]
initial
begin
	I0_imag[6] = 1'b0;
end 
// I0_imag[ 5 ]
initial
begin
	I0_imag[5] = 1'b1;
end 
// I0_imag[ 4 ]
initial
begin
	I0_imag[4] = 1'b0;
end 
// I0_imag[ 3 ]
initial
begin
	I0_imag[3] = 1'b0;
end 
// I0_imag[ 2 ]
initial
begin
	I0_imag[2] = 1'b1;
end 
// I0_imag[ 1 ]
initial
begin
	I0_imag[1] = 1'b0;
end 
// I0_imag[ 0 ]
initial
begin
	I0_imag[0] = 1'b0;
end 
// I0_real[ 15 ]
initial
begin
	I0_real[15] = 1'b0;
end 
// I0_real[ 14 ]
initial
begin
	I0_real[14] = 1'b0;
end 
// I0_real[ 13 ]
initial
begin
	I0_real[13] = 1'b0;
end 
// I0_real[ 12 ]
initial
begin
	I0_real[12] = 1'b0;
end 
// I0_real[ 11 ]
initial
begin
	I0_real[11] = 1'b1;
end 
// I0_real[ 10 ]
initial
begin
	I0_real[10] = 1'b0;
end 
// I0_real[ 9 ]
initial
begin
	I0_real[9] = 1'b0;
end 
// I0_real[ 8 ]
initial
begin
	I0_real[8] = 1'b1;
end 
// I0_real[ 7 ]
initial
begin
	I0_real[7] = 1'b1;
end 
// I0_real[ 6 ]
initial
begin
	I0_real[6] = 1'b0;
end 
// I0_real[ 5 ]
initial
begin
	I0_real[5] = 1'b1;
end 
// I0_real[ 4 ]
initial
begin
	I0_real[4] = 1'b0;
end 
// I0_real[ 3 ]
initial
begin
	I0_real[3] = 1'b0;
end 
// I0_real[ 2 ]
initial
begin
	I0_real[2] = 1'b1;
end 
// I0_real[ 1 ]
initial
begin
	I0_real[1] = 1'b0;
end 
// I0_real[ 0 ]
initial
begin
	I0_real[0] = 1'b0;
end 
// I1_imag[ 15 ]
initial
begin
	I1_imag[15] = 1'b0;
end 
// I1_imag[ 14 ]
initial
begin
	I1_imag[14] = 1'b0;
end 
// I1_imag[ 13 ]
initial
begin
	I1_imag[13] = 1'b0;
end 
// I1_imag[ 12 ]
initial
begin
	I1_imag[12] = 1'b0;
end 
// I1_imag[ 11 ]
initial
begin
	I1_imag[11] = 1'b1;
end 
// I1_imag[ 10 ]
initial
begin
	I1_imag[10] = 1'b0;
end 
// I1_imag[ 9 ]
initial
begin
	I1_imag[9] = 1'b0;
end 
// I1_imag[ 8 ]
initial
begin
	I1_imag[8] = 1'b1;
end 
// I1_imag[ 7 ]
initial
begin
	I1_imag[7] = 1'b1;
end 
// I1_imag[ 6 ]
initial
begin
	I1_imag[6] = 1'b0;
end 
// I1_imag[ 5 ]
initial
begin
	I1_imag[5] = 1'b1;
end 
// I1_imag[ 4 ]
initial
begin
	I1_imag[4] = 1'b0;
end 
// I1_imag[ 3 ]
initial
begin
	I1_imag[3] = 1'b0;
end 
// I1_imag[ 2 ]
initial
begin
	I1_imag[2] = 1'b1;
end 
// I1_imag[ 1 ]
initial
begin
	I1_imag[1] = 1'b0;
end 
// I1_imag[ 0 ]
initial
begin
	I1_imag[0] = 1'b0;
end 
// I1_real[ 15 ]
initial
begin
	I1_real[15] = 1'b0;
end 
// I1_real[ 14 ]
initial
begin
	I1_real[14] = 1'b0;
end 
// I1_real[ 13 ]
initial
begin
	I1_real[13] = 1'b0;
end 
// I1_real[ 12 ]
initial
begin
	I1_real[12] = 1'b0;
end 
// I1_real[ 11 ]
initial
begin
	I1_real[11] = 1'b1;
end 
// I1_real[ 10 ]
initial
begin
	I1_real[10] = 1'b0;
end 
// I1_real[ 9 ]
initial
begin
	I1_real[9] = 1'b0;
end 
// I1_real[ 8 ]
initial
begin
	I1_real[8] = 1'b1;
end 
// I1_real[ 7 ]
initial
begin
	I1_real[7] = 1'b1;
end 
// I1_real[ 6 ]
initial
begin
	I1_real[6] = 1'b0;
end 
// I1_real[ 5 ]
initial
begin
	I1_real[5] = 1'b1;
end 
// I1_real[ 4 ]
initial
begin
	I1_real[4] = 1'b0;
end 
// I1_real[ 3 ]
initial
begin
	I1_real[3] = 1'b0;
end 
// I1_real[ 2 ]
initial
begin
	I1_real[2] = 1'b1;
end 
// I1_real[ 1 ]
initial
begin
	I1_real[1] = 1'b0;
end 
// I1_real[ 0 ]
initial
begin
	I1_real[0] = 1'b0;
end 
// I2_imag[ 15 ]
initial
begin
	I2_imag[15] = 1'b0;
end 
// I2_imag[ 14 ]
initial
begin
	I2_imag[14] = 1'b0;
end 
// I2_imag[ 13 ]
initial
begin
	I2_imag[13] = 1'b0;
end 
// I2_imag[ 12 ]
initial
begin
	I2_imag[12] = 1'b0;
end 
// I2_imag[ 11 ]
initial
begin
	I2_imag[11] = 1'b1;
end 
// I2_imag[ 10 ]
initial
begin
	I2_imag[10] = 1'b0;
end 
// I2_imag[ 9 ]
initial
begin
	I2_imag[9] = 1'b0;
end 
// I2_imag[ 8 ]
initial
begin
	I2_imag[8] = 1'b1;
end 
// I2_imag[ 7 ]
initial
begin
	I2_imag[7] = 1'b1;
end 
// I2_imag[ 6 ]
initial
begin
	I2_imag[6] = 1'b0;
end 
// I2_imag[ 5 ]
initial
begin
	I2_imag[5] = 1'b1;
end 
// I2_imag[ 4 ]
initial
begin
	I2_imag[4] = 1'b0;
end 
// I2_imag[ 3 ]
initial
begin
	I2_imag[3] = 1'b0;
end 
// I2_imag[ 2 ]
initial
begin
	I2_imag[2] = 1'b1;
end 
// I2_imag[ 1 ]
initial
begin
	I2_imag[1] = 1'b0;
end 
// I2_imag[ 0 ]
initial
begin
	I2_imag[0] = 1'b0;
end 
// I2_real[ 15 ]
initial
begin
	I2_real[15] = 1'b0;
end 
// I2_real[ 14 ]
initial
begin
	I2_real[14] = 1'b0;
end 
// I2_real[ 13 ]
initial
begin
	I2_real[13] = 1'b0;
end 
// I2_real[ 12 ]
initial
begin
	I2_real[12] = 1'b0;
end 
// I2_real[ 11 ]
initial
begin
	I2_real[11] = 1'b1;
end 
// I2_real[ 10 ]
initial
begin
	I2_real[10] = 1'b0;
end 
// I2_real[ 9 ]
initial
begin
	I2_real[9] = 1'b0;
end 
// I2_real[ 8 ]
initial
begin
	I2_real[8] = 1'b1;
end 
// I2_real[ 7 ]
initial
begin
	I2_real[7] = 1'b1;
end 
// I2_real[ 6 ]
initial
begin
	I2_real[6] = 1'b0;
end 
// I2_real[ 5 ]
initial
begin
	I2_real[5] = 1'b1;
end 
// I2_real[ 4 ]
initial
begin
	I2_real[4] = 1'b0;
end 
// I2_real[ 3 ]
initial
begin
	I2_real[3] = 1'b0;
end 
// I2_real[ 2 ]
initial
begin
	I2_real[2] = 1'b1;
end 
// I2_real[ 1 ]
initial
begin
	I2_real[1] = 1'b0;
end 
// I2_real[ 0 ]
initial
begin
	I2_real[0] = 1'b0;
end 
// I3_imag[ 15 ]
initial
begin
	I3_imag[15] = 1'b0;
end 
// I3_imag[ 14 ]
initial
begin
	I3_imag[14] = 1'b0;
end 
// I3_imag[ 13 ]
initial
begin
	I3_imag[13] = 1'b0;
end 
// I3_imag[ 12 ]
initial
begin
	I3_imag[12] = 1'b0;
end 
// I3_imag[ 11 ]
initial
begin
	I3_imag[11] = 1'b1;
end 
// I3_imag[ 10 ]
initial
begin
	I3_imag[10] = 1'b0;
end 
// I3_imag[ 9 ]
initial
begin
	I3_imag[9] = 1'b0;
end 
// I3_imag[ 8 ]
initial
begin
	I3_imag[8] = 1'b1;
end 
// I3_imag[ 7 ]
initial
begin
	I3_imag[7] = 1'b1;
end 
// I3_imag[ 6 ]
initial
begin
	I3_imag[6] = 1'b0;
end 
// I3_imag[ 5 ]
initial
begin
	I3_imag[5] = 1'b1;
end 
// I3_imag[ 4 ]
initial
begin
	I3_imag[4] = 1'b0;
end 
// I3_imag[ 3 ]
initial
begin
	I3_imag[3] = 1'b0;
end 
// I3_imag[ 2 ]
initial
begin
	I3_imag[2] = 1'b1;
end 
// I3_imag[ 1 ]
initial
begin
	I3_imag[1] = 1'b0;
end 
// I3_imag[ 0 ]
initial
begin
	I3_imag[0] = 1'b0;
end 
// I3_real[ 15 ]
initial
begin
	I3_real[15] = 1'b0;
end 
// I3_real[ 14 ]
initial
begin
	I3_real[14] = 1'b0;
end 
// I3_real[ 13 ]
initial
begin
	I3_real[13] = 1'b0;
end 
// I3_real[ 12 ]
initial
begin
	I3_real[12] = 1'b0;
end 
// I3_real[ 11 ]
initial
begin
	I3_real[11] = 1'b1;
end 
// I3_real[ 10 ]
initial
begin
	I3_real[10] = 1'b0;
end 
// I3_real[ 9 ]
initial
begin
	I3_real[9] = 1'b0;
end 
// I3_real[ 8 ]
initial
begin
	I3_real[8] = 1'b1;
end 
// I3_real[ 7 ]
initial
begin
	I3_real[7] = 1'b1;
end 
// I3_real[ 6 ]
initial
begin
	I3_real[6] = 1'b0;
end 
// I3_real[ 5 ]
initial
begin
	I3_real[5] = 1'b1;
end 
// I3_real[ 4 ]
initial
begin
	I3_real[4] = 1'b0;
end 
// I3_real[ 3 ]
initial
begin
	I3_real[3] = 1'b0;
end 
// I3_real[ 2 ]
initial
begin
	I3_real[2] = 1'b1;
end 
// I3_real[ 1 ]
initial
begin
	I3_real[1] = 1'b0;
end 
// I3_real[ 0 ]
initial
begin
	I3_real[0] = 1'b0;
end 
// I4_imag[ 15 ]
initial
begin
	I4_imag[15] = 1'b0;
end 
// I4_imag[ 14 ]
initial
begin
	I4_imag[14] = 1'b0;
end 
// I4_imag[ 13 ]
initial
begin
	I4_imag[13] = 1'b0;
end 
// I4_imag[ 12 ]
initial
begin
	I4_imag[12] = 1'b0;
end 
// I4_imag[ 11 ]
initial
begin
	I4_imag[11] = 1'b1;
end 
// I4_imag[ 10 ]
initial
begin
	I4_imag[10] = 1'b0;
end 
// I4_imag[ 9 ]
initial
begin
	I4_imag[9] = 1'b0;
end 
// I4_imag[ 8 ]
initial
begin
	I4_imag[8] = 1'b1;
end 
// I4_imag[ 7 ]
initial
begin
	I4_imag[7] = 1'b1;
end 
// I4_imag[ 6 ]
initial
begin
	I4_imag[6] = 1'b0;
end 
// I4_imag[ 5 ]
initial
begin
	I4_imag[5] = 1'b1;
end 
// I4_imag[ 4 ]
initial
begin
	I4_imag[4] = 1'b0;
end 
// I4_imag[ 3 ]
initial
begin
	I4_imag[3] = 1'b0;
end 
// I4_imag[ 2 ]
initial
begin
	I4_imag[2] = 1'b1;
end 
// I4_imag[ 1 ]
initial
begin
	I4_imag[1] = 1'b0;
end 
// I4_imag[ 0 ]
initial
begin
	I4_imag[0] = 1'b0;
end 
// I4_real[ 15 ]
initial
begin
	I4_real[15] = 1'b0;
end 
// I4_real[ 14 ]
initial
begin
	I4_real[14] = 1'b0;
end 
// I4_real[ 13 ]
initial
begin
	I4_real[13] = 1'b0;
end 
// I4_real[ 12 ]
initial
begin
	I4_real[12] = 1'b0;
end 
// I4_real[ 11 ]
initial
begin
	I4_real[11] = 1'b1;
end 
// I4_real[ 10 ]
initial
begin
	I4_real[10] = 1'b0;
end 
// I4_real[ 9 ]
initial
begin
	I4_real[9] = 1'b0;
end 
// I4_real[ 8 ]
initial
begin
	I4_real[8] = 1'b1;
end 
// I4_real[ 7 ]
initial
begin
	I4_real[7] = 1'b1;
end 
// I4_real[ 6 ]
initial
begin
	I4_real[6] = 1'b0;
end 
// I4_real[ 5 ]
initial
begin
	I4_real[5] = 1'b1;
end 
// I4_real[ 4 ]
initial
begin
	I4_real[4] = 1'b0;
end 
// I4_real[ 3 ]
initial
begin
	I4_real[3] = 1'b0;
end 
// I4_real[ 2 ]
initial
begin
	I4_real[2] = 1'b1;
end 
// I4_real[ 1 ]
initial
begin
	I4_real[1] = 1'b0;
end 
// I4_real[ 0 ]
initial
begin
	I4_real[0] = 1'b0;
end 
// I5_imag[ 15 ]
initial
begin
	I5_imag[15] = 1'b0;
end 
// I5_imag[ 14 ]
initial
begin
	I5_imag[14] = 1'b0;
end 
// I5_imag[ 13 ]
initial
begin
	I5_imag[13] = 1'b0;
end 
// I5_imag[ 12 ]
initial
begin
	I5_imag[12] = 1'b0;
end 
// I5_imag[ 11 ]
initial
begin
	I5_imag[11] = 1'b1;
end 
// I5_imag[ 10 ]
initial
begin
	I5_imag[10] = 1'b0;
end 
// I5_imag[ 9 ]
initial
begin
	I5_imag[9] = 1'b0;
end 
// I5_imag[ 8 ]
initial
begin
	I5_imag[8] = 1'b1;
end 
// I5_imag[ 7 ]
initial
begin
	I5_imag[7] = 1'b1;
end 
// I5_imag[ 6 ]
initial
begin
	I5_imag[6] = 1'b0;
end 
// I5_imag[ 5 ]
initial
begin
	I5_imag[5] = 1'b1;
end 
// I5_imag[ 4 ]
initial
begin
	I5_imag[4] = 1'b0;
end 
// I5_imag[ 3 ]
initial
begin
	I5_imag[3] = 1'b0;
end 
// I5_imag[ 2 ]
initial
begin
	I5_imag[2] = 1'b1;
end 
// I5_imag[ 1 ]
initial
begin
	I5_imag[1] = 1'b0;
end 
// I5_imag[ 0 ]
initial
begin
	I5_imag[0] = 1'b0;
end 
// I5_real[ 15 ]
initial
begin
	I5_real[15] = 1'b0;
end 
// I5_real[ 14 ]
initial
begin
	I5_real[14] = 1'b0;
end 
// I5_real[ 13 ]
initial
begin
	I5_real[13] = 1'b0;
end 
// I5_real[ 12 ]
initial
begin
	I5_real[12] = 1'b0;
end 
// I5_real[ 11 ]
initial
begin
	I5_real[11] = 1'b1;
end 
// I5_real[ 10 ]
initial
begin
	I5_real[10] = 1'b0;
end 
// I5_real[ 9 ]
initial
begin
	I5_real[9] = 1'b0;
end 
// I5_real[ 8 ]
initial
begin
	I5_real[8] = 1'b1;
end 
// I5_real[ 7 ]
initial
begin
	I5_real[7] = 1'b1;
end 
// I5_real[ 6 ]
initial
begin
	I5_real[6] = 1'b0;
end 
// I5_real[ 5 ]
initial
begin
	I5_real[5] = 1'b1;
end 
// I5_real[ 4 ]
initial
begin
	I5_real[4] = 1'b0;
end 
// I5_real[ 3 ]
initial
begin
	I5_real[3] = 1'b0;
end 
// I5_real[ 2 ]
initial
begin
	I5_real[2] = 1'b1;
end 
// I5_real[ 1 ]
initial
begin
	I5_real[1] = 1'b0;
end 
// I5_real[ 0 ]
initial
begin
	I5_real[0] = 1'b0;
end 
// I6_imag[ 15 ]
initial
begin
	I6_imag[15] = 1'b0;
end 
// I6_imag[ 14 ]
initial
begin
	I6_imag[14] = 1'b0;
end 
// I6_imag[ 13 ]
initial
begin
	I6_imag[13] = 1'b0;
end 
// I6_imag[ 12 ]
initial
begin
	I6_imag[12] = 1'b0;
end 
// I6_imag[ 11 ]
initial
begin
	I6_imag[11] = 1'b1;
end 
// I6_imag[ 10 ]
initial
begin
	I6_imag[10] = 1'b0;
end 
// I6_imag[ 9 ]
initial
begin
	I6_imag[9] = 1'b0;
end 
// I6_imag[ 8 ]
initial
begin
	I6_imag[8] = 1'b1;
end 
// I6_imag[ 7 ]
initial
begin
	I6_imag[7] = 1'b1;
end 
// I6_imag[ 6 ]
initial
begin
	I6_imag[6] = 1'b0;
end 
// I6_imag[ 5 ]
initial
begin
	I6_imag[5] = 1'b1;
end 
// I6_imag[ 4 ]
initial
begin
	I6_imag[4] = 1'b0;
end 
// I6_imag[ 3 ]
initial
begin
	I6_imag[3] = 1'b0;
end 
// I6_imag[ 2 ]
initial
begin
	I6_imag[2] = 1'b1;
end 
// I6_imag[ 1 ]
initial
begin
	I6_imag[1] = 1'b0;
end 
// I6_imag[ 0 ]
initial
begin
	I6_imag[0] = 1'b0;
end 
// I6_real[ 15 ]
initial
begin
	I6_real[15] = 1'b0;
end 
// I6_real[ 14 ]
initial
begin
	I6_real[14] = 1'b0;
end 
// I6_real[ 13 ]
initial
begin
	I6_real[13] = 1'b0;
end 
// I6_real[ 12 ]
initial
begin
	I6_real[12] = 1'b0;
end 
// I6_real[ 11 ]
initial
begin
	I6_real[11] = 1'b1;
end 
// I6_real[ 10 ]
initial
begin
	I6_real[10] = 1'b0;
end 
// I6_real[ 9 ]
initial
begin
	I6_real[9] = 1'b0;
end 
// I6_real[ 8 ]
initial
begin
	I6_real[8] = 1'b1;
end 
// I6_real[ 7 ]
initial
begin
	I6_real[7] = 1'b1;
end 
// I6_real[ 6 ]
initial
begin
	I6_real[6] = 1'b0;
end 
// I6_real[ 5 ]
initial
begin
	I6_real[5] = 1'b1;
end 
// I6_real[ 4 ]
initial
begin
	I6_real[4] = 1'b0;
end 
// I6_real[ 3 ]
initial
begin
	I6_real[3] = 1'b0;
end 
// I6_real[ 2 ]
initial
begin
	I6_real[2] = 1'b1;
end 
// I6_real[ 1 ]
initial
begin
	I6_real[1] = 1'b0;
end 
// I6_real[ 0 ]
initial
begin
	I6_real[0] = 1'b0;
end 
// I7_imag[ 15 ]
initial
begin
	I7_imag[15] = 1'b0;
end 
// I7_imag[ 14 ]
initial
begin
	I7_imag[14] = 1'b0;
end 
// I7_imag[ 13 ]
initial
begin
	I7_imag[13] = 1'b0;
end 
// I7_imag[ 12 ]
initial
begin
	I7_imag[12] = 1'b0;
end 
// I7_imag[ 11 ]
initial
begin
	I7_imag[11] = 1'b1;
end 
// I7_imag[ 10 ]
initial
begin
	I7_imag[10] = 1'b0;
end 
// I7_imag[ 9 ]
initial
begin
	I7_imag[9] = 1'b0;
end 
// I7_imag[ 8 ]
initial
begin
	I7_imag[8] = 1'b1;
end 
// I7_imag[ 7 ]
initial
begin
	I7_imag[7] = 1'b1;
end 
// I7_imag[ 6 ]
initial
begin
	I7_imag[6] = 1'b0;
end 
// I7_imag[ 5 ]
initial
begin
	I7_imag[5] = 1'b1;
end 
// I7_imag[ 4 ]
initial
begin
	I7_imag[4] = 1'b0;
end 
// I7_imag[ 3 ]
initial
begin
	I7_imag[3] = 1'b0;
end 
// I7_imag[ 2 ]
initial
begin
	I7_imag[2] = 1'b1;
end 
// I7_imag[ 1 ]
initial
begin
	I7_imag[1] = 1'b0;
end 
// I7_imag[ 0 ]
initial
begin
	I7_imag[0] = 1'b0;
end 
// I7_real[ 15 ]
initial
begin
	I7_real[15] = 1'b0;
end 
// I7_real[ 14 ]
initial
begin
	I7_real[14] = 1'b0;
end 
// I7_real[ 13 ]
initial
begin
	I7_real[13] = 1'b0;
end 
// I7_real[ 12 ]
initial
begin
	I7_real[12] = 1'b0;
end 
// I7_real[ 11 ]
initial
begin
	I7_real[11] = 1'b1;
end 
// I7_real[ 10 ]
initial
begin
	I7_real[10] = 1'b0;
end 
// I7_real[ 9 ]
initial
begin
	I7_real[9] = 1'b0;
end 
// I7_real[ 8 ]
initial
begin
	I7_real[8] = 1'b1;
end 
// I7_real[ 7 ]
initial
begin
	I7_real[7] = 1'b1;
end 
// I7_real[ 6 ]
initial
begin
	I7_real[6] = 1'b0;
end 
// I7_real[ 5 ]
initial
begin
	I7_real[5] = 1'b1;
end 
// I7_real[ 4 ]
initial
begin
	I7_real[4] = 1'b0;
end 
// I7_real[ 3 ]
initial
begin
	I7_real[3] = 1'b0;
end 
// I7_real[ 2 ]
initial
begin
	I7_real[2] = 1'b1;
end 
// I7_real[ 1 ]
initial
begin
	I7_real[1] = 1'b0;
end 
// I7_real[ 0 ]
initial
begin
	I7_real[0] = 1'b0;
end 

// INV
initial
begin
	INV = 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b0;
end 

fft_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.I0_imag(I0_imag),
	.I0_real(I0_real),
	.I1_imag(I1_imag),
	.I1_real(I1_real),
	.I2_imag(I2_imag),
	.I2_real(I2_real),
	.I3_imag(I3_imag),
	.I3_real(I3_real),
	.I4_imag(I4_imag),
	.I4_real(I4_real),
	.I5_imag(I5_imag),
	.I5_real(I5_real),
	.I6_imag(I6_imag),
	.I6_real(I6_real),
	.I7_imag(I7_imag),
	.I7_real(I7_real),
	.INV(INV),
	.RESET(RESET),
	.sampler_tx(sampler)
);

fft_vlg_check_tst tb_out(
	.O0_imag(O0_imag),
	.O0_real(O0_real),
	.O1_imag(O1_imag),
	.O1_real(O1_real),
	.O2_imag(O2_imag),
	.O2_real(O2_real),
	.O3_imag(O3_imag),
	.O3_real(O3_real),
	.O4_imag(O4_imag),
	.O4_real(O4_real),
	.O5_imag(O5_imag),
	.O5_real(O5_real),
	.O6_imag(O6_imag),
	.O6_real(O6_real),
	.O7_imag(O7_imag),
	.O7_real(O7_real),
	.sampler_rx(sampler)
);
endmodule

